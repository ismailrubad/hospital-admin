[{"D:\\work\\hospital-admin\\src\\index.js":"1","D:\\work\\hospital-admin\\src\\App.js":"2","D:\\work\\hospital-admin\\src\\reportWebVitals.js":"3","D:\\work\\hospital-admin\\src\\history.js":"4","D:\\work\\hospital-admin\\src\\components\\SignIn\\SignIn.js":"5","D:\\work\\hospital-admin\\src\\components\\MainApp\\index.js":"6","D:\\work\\hospital-admin\\src\\components\\Layout\\index.js":"7","D:\\work\\hospital-admin\\src\\components\\Dashboard\\Dashboard.js":"8","D:\\work\\hospital-admin\\src\\components\\index.js":"9","D:\\work\\hospital-admin\\src\\components\\Hospital\\Hospital.js":"10","D:\\work\\hospital-admin\\src\\components\\Area\\District.js":"11","D:\\work\\hospital-admin\\src\\components\\Area\\Zone.js":"12","D:\\work\\hospital-admin\\src\\context\\AppContextProvider.js":"13","D:\\work\\hospital-admin\\src\\components\\Area\\zoneList\\ZoneList.js":"14","D:\\work\\hospital-admin\\src\\Api\\district-api.js":"15","D:\\work\\hospital-admin\\src\\Api\\zone-api.js":"16","D:\\work\\hospital-admin\\src\\components\\Area\\DistrictList\\DistrictList.js":"17","D:\\work\\hospital-admin\\src\\Api\\hospital-api.js":"18","D:\\work\\hospital-admin\\src\\components\\Hospital\\HospitalList\\HospitalList.js":"19","D:\\work\\hospital-admin\\src\\components\\Doctor\\Doctor.js":"20","D:\\work\\hospital-admin\\src\\Api\\doctor-api.js":"21","D:\\work\\hospital-admin\\src\\components\\Doctor\\DoctorList\\DoctorList.js":"22","D:\\work\\hospital-admin\\src\\components\\Service\\Service.js":"23","D:\\work\\hospital-admin\\src\\Api\\service-api.js":"24","D:\\work\\hospital-admin\\src\\components\\Service\\ServiceList\\ServiceList.js":"25","D:\\work\\hospital-admin\\src\\components\\DiseaseCategory\\DiseaseCategory.js":"26","D:\\work\\hospital-admin\\src\\Api\\disease-api.js":"27","D:\\work\\hospital-admin\\src\\components\\DiseaseCategory\\DiseaseCategoryList\\DiseaseCategoryList.js":"28","D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageHandlerModal.jsx":"29","D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\ImageControl.jsx":"30","D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\UploadImage\\UploadImage.jsx":"31","D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\ThumbImage\\ThumbImage.jsx":"32","D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\Helper\\Helper.js":"33","D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\UploadImage\\ImageUploader\\ImageUploader.jsx":"34","D:\\work\\hospital-admin\\src\\components\\Billing\\Billing.js":"35","D:\\work\\hospital-admin\\src\\components\\Billing\\BillingList\\BillingList.js":"36","D:\\work\\hospital-admin\\src\\components\\Customer\\Staff.js":"37","D:\\work\\hospital-admin\\src\\components\\Customer\\StaffList\\StaffList.js":"38","D:\\work\\hospital-admin\\src\\Api\\staff-api.js":"39","D:\\work\\hospital-admin\\src\\components\\Staff\\Staff.js":"40","D:\\work\\hospital-admin\\src\\components\\Staff\\StaffList\\StaffList.js":"41","D:\\work\\hospital-admin\\src\\Api\\customer-api.js":"42","D:\\work\\hospital-admin\\src\\Api\\billing-api.js":"43"},{"size":500,"mtime":499162500000,"results":"44","hashOfConfig":"45"},{"size":1892,"mtime":1613380006978,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":499162500000,"results":"47","hashOfConfig":"45"},{"size":86,"mtime":1610864554475,"results":"48","hashOfConfig":"45"},{"size":182,"mtime":1610866168355,"results":"49","hashOfConfig":"45"},{"size":1699,"mtime":1613304860630,"results":"50","hashOfConfig":"45"},{"size":10276,"mtime":1614505438400,"results":"51","hashOfConfig":"45"},{"size":180,"mtime":1610873963918,"results":"52","hashOfConfig":"45"},{"size":206,"mtime":1613380008806,"results":"53","hashOfConfig":"45"},{"size":14674,"mtime":1614508256039,"results":"54","hashOfConfig":"45"},{"size":5075,"mtime":1611983912568,"results":"55","hashOfConfig":"45"},{"size":8036,"mtime":1611822162221,"results":"56","hashOfConfig":"45"},{"size":15438,"mtime":1614512190155,"results":"57","hashOfConfig":"45"},{"size":18307,"mtime":1614500719474,"results":"58","hashOfConfig":"45"},{"size":1152,"mtime":1614501557878,"results":"59","hashOfConfig":"45"},{"size":1070,"mtime":1614501683103,"results":"60","hashOfConfig":"45"},{"size":16082,"mtime":1614500719518,"results":"61","hashOfConfig":"45"},{"size":1796,"mtime":1614501667347,"results":"62","hashOfConfig":"45"},{"size":22508,"mtime":1614514657819,"results":"63","hashOfConfig":"45"},{"size":11327,"mtime":1614508434247,"results":"64","hashOfConfig":"45"},{"size":1549,"mtime":1614501661937,"results":"65","hashOfConfig":"45"},{"size":24177,"mtime":1614500719637,"results":"66","hashOfConfig":"45"},{"size":11728,"mtime":1614509066424,"results":"67","hashOfConfig":"45"},{"size":1198,"mtime":1614501672590,"results":"68","hashOfConfig":"45"},{"size":21126,"mtime":1614507092655,"results":"69","hashOfConfig":"45"},{"size":5959,"mtime":1614074442016,"results":"70","hashOfConfig":"45"},{"size":1148,"mtime":1614501652740,"results":"71","hashOfConfig":"45"},{"size":11345,"mtime":1613822007905,"results":"72","hashOfConfig":"45"},{"size":1707,"mtime":1612005614000,"results":"73","hashOfConfig":"45"},{"size":6289,"mtime":1614500719295,"results":"74","hashOfConfig":"45"},{"size":435,"mtime":1611824430000,"results":"75","hashOfConfig":"45"},{"size":2165,"mtime":1614500719382,"results":"76","hashOfConfig":"45"},{"size":378,"mtime":1611824430000,"results":"77","hashOfConfig":"45"},{"size":4110,"mtime":1611824430000,"results":"78","hashOfConfig":"45"},{"size":10595,"mtime":1612091959077,"results":"79","hashOfConfig":"45"},{"size":22344,"mtime":1614512535947,"results":"80","hashOfConfig":"45"},{"size":8673,"mtime":1614510760086,"results":"81","hashOfConfig":"45"},{"size":17701,"mtime":1614507175696,"results":"82","hashOfConfig":"45"},{"size":1083,"mtime":1614506751691,"results":"83","hashOfConfig":"45"},{"size":9175,"mtime":1614510602228,"results":"84","hashOfConfig":"45"},{"size":19073,"mtime":1614510694110,"results":"85","hashOfConfig":"45"},{"size":1011,"mtime":1614501642578,"results":"86","hashOfConfig":"45"},{"size":692,"mtime":1614512229839,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1ejd73l",{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\work\\hospital-admin\\src\\index.js",[],["186","187"],"D:\\work\\hospital-admin\\src\\App.js",["188","189"],"import './App.css';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { Router } from 'react-router';\nimport {\n   BrowserRouter, Route, Redirect, Switch,\n   withRouter\n} from 'react-router-dom';\nimport history from \"./history\";\nimport MainApp from \"./components/MainApp\";\nimport SignIn from \"./components/SignIn/SignIn\";\nimport MainComponent from \"./components\";\nimport { AppProvider } from './context/AppContextProvider';\nimport { AppContext } from './context/AppContextProvider';\n\n\nconst appTheme = createMuiTheme({\n   palette: {\n      primary: {\n         main: '#1976d2',\n         light: '#757ce8'\n      },\n      secondary: {\n         main: \"#4caf50\",\n      }\n   },\n   status: {\n      danger: 'orange',\n   },\n});\n\nconst AuthRoute = ({ component: Component, isUserAuthenticated, ...rest }) => (\n   <Route {...rest} render={(props) => (\n      isUserAuthenticated === true\n         ? <Component {...props} />\n         : <Redirect to={{\n            pathname: '/signin',\n            state: { from: props.location }\n         }} />\n   )} />\n)\n\nconst App = () => {\n   return (\n      <AppProvider>\n\n         <ThemeProvider theme={appTheme}>\n            <AppContext.Consumer>\n               {(context) => (\n                  <div className=\"App\">\n                     <Router history={history}>\n                        <Switch>\n                           <AuthRoute path=\"/admin\" isUserAuthenticated={true}\n                              component={MainApp} />\n                           <Route path=\"/signin\" component={SignIn} />\n                           <Route path=\"/\" exact component={MainComponent} />\n\n                        </Switch>\n                     </Router>\n                  </div>\n               )}\n            </AppContext.Consumer>\n\n         </ThemeProvider>\n      </AppProvider>\n   );\n}\n\nexport default App;\n","D:\\work\\hospital-admin\\src\\reportWebVitals.js",[],"D:\\work\\hospital-admin\\src\\history.js",[],"D:\\work\\hospital-admin\\src\\components\\SignIn\\SignIn.js",[],"D:\\work\\hospital-admin\\src\\components\\MainApp\\index.js",["190"],"import React, { Component } from 'react';\r\nimport { Route, withRouter, Switch, Redirect } from \"react-router-dom\";\r\nimport Layout from '../Layout'\r\nimport Dashboard from '../Dashboard/Dashboard';\r\nimport District from '../Area/District';\r\nimport Hospital from '../Hospital/Hospital';\r\nimport Zone from '../Area/Zone';\r\nimport Doctor from '../Doctor/Doctor'\r\nimport Service from '../Service/Service'\r\nimport DiseaseCategory from '../DiseaseCategory/DiseaseCategory'\r\nimport Staff from '../Staff/Staff'\r\nimport Customer from '../Customer/Staff'\r\nimport Billing from '../Billing/Billing'\r\n\r\nexport default class MainApp extends Component {\r\n   render() {\r\n      const { match } = this.props;\r\n\r\n      return (\r\n         <Layout currentUrl={match.url}>\r\n            <Switch>\r\n               <Redirect exact from={`${match.url}/`} to={`${match.url}/dashboards`} />\r\n               <Route path={`${match.url}/dashboards`} component={Dashboard} />\r\n               <Route path={`${match.url}/district`} component={District} />\r\n               <Route path={`${match.url}/zone`} component={Zone} />\r\n               <Route path={`${match.url}/hospital`} component={Hospital} />\r\n               <Route path={`${match.url}/doctor`} component={Doctor} />\r\n               <Route path={`${match.url}/service`} component={Service} />\r\n               <Route path={`${match.url}/disease-category`} component={DiseaseCategory} />\r\n               <Route path={`${match.url}/staff`} component={Staff} />\r\n               <Route path={`${match.url}/customer`} component={Customer} />\r\n               <Route path={`${match.url}/billing`} component={Billing} />\r\n            </Switch>\r\n         </Layout>\r\n      );\r\n   }\r\n}\r\n","D:\\work\\hospital-admin\\src\\components\\Layout\\index.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216"],"D:\\work\\hospital-admin\\src\\components\\Dashboard\\Dashboard.js",[],"D:\\work\\hospital-admin\\src\\components\\index.js",[],"D:\\work\\hospital-admin\\src\\components\\Hospital\\Hospital.js",["217"],"D:\\work\\hospital-admin\\src\\components\\Area\\District.js",["218","219"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { AppContext } from '../../context/AppContextProvider';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { addDistrict } from \"../../Api/district-api\";\r\n\r\nimport './style.css'\r\nimport DistrictList from './DistrictList/DistrictList';\r\n\r\nclass District extends Component {\r\n\r\n   state = {\r\n      createModalOpen: false,\r\n      districtName: null,\r\n      submittingCreate: false,\r\n      districtNameError: false,\r\n      inputError: {}\r\n   }\r\n\r\n   handleCreateModalOpen = () => {\r\n      this.setState({\r\n         createModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleCreateModalClose = () => {\r\n      this.setState({\r\n         createModalOpen: false,\r\n         submittingCreate: false,\r\n         districtNameError: false\r\n      })\r\n   }\r\n\r\n   handleDistrictNameOnChange = (event) => {\r\n      this.setState({\r\n         districtName: event.target.value\r\n      })\r\n   }\r\n\r\n   handleFormSubmit = () => {\r\n      this.setState({\r\n         submittingCreate: true\r\n      }, () => {\r\n         addDistrict(this.state.districtName).then((response) => {\r\n            console.log(response);\r\n            // this.context.addDistrictToContext(response.data[0])\r\n            this.context.updateDistrictList();\r\n            this.handleCreateModalClose();\r\n         }).catch((error) => {\r\n            console.log(error);\r\n            console.log({ res: error.response }, \"123\")\r\n            this.setState({\r\n               submittingCreate: false,\r\n               districtNameError: true,\r\n               inputError: error.response && error.response.data\r\n            })\r\n         });\r\n      })\r\n   }\r\n\r\n   renderCreateModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.createModalOpen}\r\n            onClose={this.handleCreateModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.createModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleCreateModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title=\"Add District\"\r\n                        />\r\n                        <CardContent>\r\n                           <div className=\"form_wrapper\">\r\n                              <form noValidate autoComplete=\"off\">\r\n                                 <TextField\r\n                                    onChange={this.handleDistrictNameOnChange} id=\"standard-basic\"\r\n                                    label=\"District Name\"\r\n                                    error={this.state.inputError && this.state.inputError.name ? true : false}\r\n                                    helperText={this.state.inputError && this.state.inputError.name} />\r\n\r\n                                 <Button onClick={this.handleFormSubmit} variant=\"contained\" color=\"primary\">\r\n                                    {this.state.submittingCreate ?\r\n                                       <CircularProgress style={{ marginRight: 5 }} color=\"#fff\" size={18} /> : null}\r\n                                    Submit\r\n                                 </Button>\r\n                              </form>\r\n                           </div>\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n\r\n   render() {\r\n      console.log(this.context)\r\n      return (\r\n         <div className=\"\">\r\n            <DistrictList />\r\n            {this.renderCreateModal()}\r\n            <Fab onClick={this.handleCreateModalOpen} variant=\"extended\" color=\"primary\" aria-label=\"add\" className=\"addIcon\">\r\n               <AddIcon />\r\n               Add District\r\n            </Fab>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nDistrict.contextType = AppContext;\r\n\r\nexport default District;\r\n","D:\\work\\hospital-admin\\src\\components\\Area\\Zone.js",["220","221"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { AppContext } from '../../context/AppContextProvider';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ZoneList from './zoneList/ZoneList';\r\nimport { addZone, editZone } from \"../../Api/zone-api\";\r\nimport { fetchAllDistricts } from \"../../Api/district-api\";\r\n\r\n\r\nclass Zone extends Component {\r\n\r\n   state = {\r\n      zoneId: null, // used for editing a zone\r\n      zoneName: \"\",\r\n      selectedDistrict: \"\",\r\n      createModalOpen: false,\r\n      districtList: null,\r\n      submittingCreate: false,\r\n      inputError: {},\r\n      editForm: false\r\n   }\r\n\r\n   handleZoneNameOnChange = (event) => {\r\n      this.setState({\r\n         zoneName: event.target.value\r\n      })\r\n   }\r\n\r\n   handleCreateModalOpen = () => {\r\n      this.setState({\r\n         createModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleCreateModalClose = () => {\r\n      this.setState({\r\n         createModalOpen: false,\r\n         zoneName: null, selectedDistrict: null\r\n      })\r\n   }\r\n\r\n   handleDistrictChange = (event) => {\r\n      this.setState({\r\n         selectedDistrict: event.target.value\r\n      })\r\n   }\r\n\r\n   handleFormSubmit = () => {\r\n\r\n      if (this.state.editForm) {\r\n         this.setState({\r\n            submittingCreate: true\r\n         }, () => {\r\n            editZone(this.state.zoneId, this.state.zoneName, this.state.selectedDistrict)\r\n               .then((response) => {\r\n                  // console.log(response);\r\n                  // this.context.addZoneToContext(response.data[0])\r\n                  this.context.updateZoneList();\r\n                  this.handleCreateModalClose();\r\n               })\r\n               .catch((error) => {\r\n                  console.log(error);\r\n                  this.setState({\r\n                     submittingCreate: false,\r\n                     inputError: error.response && error.response.data\r\n                  })\r\n               });\r\n         })\r\n      }\r\n      else {\r\n         this.setState({\r\n            submittingCreate: true\r\n         }, () => {\r\n            addZone(this.state.zoneName, this.state.selectedDistrict)\r\n               .then((response) => {\r\n                  // console.log(response);\r\n                  // this.context.addZoneToContext(response.data[0])\r\n                  this.context.updateZoneList();\r\n                  this.handleCreateModalClose();\r\n               })\r\n               .catch((error) => {\r\n                  console.log(error);\r\n                  this.setState({\r\n                     submittingCreate: false,\r\n                     inputError: error.response && error.response.data\r\n                  })\r\n               });\r\n         })\r\n      }\r\n   }\r\n\r\n   renderCreateModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.createModalOpen}\r\n            onClose={this.handleCreateModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.createModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleCreateModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title={this.state.editForm ? \"Edit Zone\" : \"Add Zone\"}\r\n                        />\r\n                        <CardContent>\r\n                           <div className=\"form_wrapper\">\r\n                              <form noValidate autoComplete=\"off\">\r\n                                 <TextField\r\n                                    error={this.state.inputError && this.state.inputError.name ? true : false}\r\n                                    helperText={this.state.inputError && this.state.inputError.name}\r\n                                    value={this.state.zoneName}\r\n                                    onChange={this.handleZoneNameOnChange} id=\"standard-basic\" label=\"Zone Name\" />\r\n                                 <TextField\r\n                                    id=\"standard-select-currency\"\r\n                                    select\r\n                                    label=\"Select a district\"\r\n                                    error={this.state.inputError && this.state.inputError.district ? true : false}\r\n                                    elperText={this.state.inputError && this.state.inputError.district}\r\n                                    value={this.state.selectedDistrict}\r\n                                    onChange={this.handleDistrictChange}\r\n                                 >\r\n                                    {\r\n                                       this.state.districtList ?\r\n                                          this.state.districtList.data.map((option) => (\r\n                                             <MenuItem key={option._id} value={option._id}>\r\n                                                {option.name}\r\n                                             </MenuItem>\r\n                                          )) : null\r\n                                    }\r\n                                 </TextField>\r\n                                 <Button onClick={this.handleFormSubmit} variant=\"contained\" color=\"primary\">\r\n                                    Submit\r\n                                 </Button>\r\n                              </form>\r\n                           </div>\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n   editZone = (zone) => {\r\n      console.log(zone)\r\n      this.handleCreateModalOpen()\r\n      this.setState({\r\n         zoneId: zone._id,\r\n         zoneName: zone.name,\r\n         selectedDistrict: zone.district._id,\r\n         editForm: true\r\n      })\r\n   }\r\n\r\n   componentDidMount() {\r\n      fetchAllDistricts().then((response) => {\r\n         this.setState({\r\n            districtList: response.data\r\n         })\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n   }\r\n   render() {\r\n      // console.log(this.props)\r\n      // console.log(this.state)\r\n      return (\r\n         <div className=\"  \">\r\n            <ZoneList editZone={this.editZone} districtList={this.state.districtList ? this.state.districtList.data : []} />\r\n\r\n            {this.renderCreateModal()}\r\n            <Fab onClick={() => {\r\n               this.setState({\r\n                  editForm: false\r\n               }, () => {\r\n                  this.handleCreateModalOpen()\r\n               })\r\n            }} color=\"primary\" variant=\"extended\" aria-label=\"add\" className=\"addIcon\">\r\n               <AddIcon />\r\n               Add Zone\r\n            </Fab>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nZone.contextType = AppContext;\r\n\r\nexport default Zone;","D:\\work\\hospital-admin\\src\\context\\AppContextProvider.js",["222"],"D:\\work\\hospital-admin\\src\\components\\Area\\zoneList\\ZoneList.js",["223","224","225","226","227","228","229"],"import React, { Component } from 'react';\r\nimport { AppContext } from '../../../context/AppContextProvider';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from 'axios';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { fetchZoneList } from \"../../../Api/zone-api\";\r\nimport { Box, CircularProgress } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport { fetchZoneDetails } from \"../../../Api/zone-api\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { fetchAllDistricts } from \"../../../Api/district-api\";\r\n\r\nclass ZoneList extends Component {\r\n\r\n   state = {\r\n      selectedDistrict: null,\r\n      districtList: null,\r\n      searchQuery: null,\r\n\r\n      currentPage: null,\r\n      zoneTableSort: {\r\n         sort: \"name\",\r\n         sortOrder: 1\r\n      },\r\n      zoneDetails: null,\r\n      zoneDetailsModalOpen: false,\r\n      isloading: false\r\n   }\r\n\r\n   startLoading = () => {\r\n      this.setState({ isloading: true })\r\n   };\r\n\r\n\r\n   stopLoading = () => {\r\n      this.setState({ isloading: false })\r\n   };\r\n\r\n\r\n   handleZoneDelete = (id) => {\r\n\r\n      var r = window.confirm(\"Do you want to delete the item?\");\r\n      if (r == true) {\r\n         axios.get(`http://localhost:5000/admin/api/zone/remove?id=${id}`, {\r\n            params: {\r\n\r\n            }\r\n         })\r\n            .then((response) => {\r\n               console.log(response);\r\n               this.context.updateZoneList()\r\n            })\r\n            .catch(function (error) {\r\n               console.log(error);\r\n            })\r\n            .then(function () {\r\n               // always executed\r\n            });\r\n      } else {\r\n\r\n      }\r\n\r\n\r\n   }\r\n\r\n   handleRowChange = (event) => {\r\n      // console.log(event.target.value)\r\n      // this.context.updateTableRowNumber(event.target.value)\r\n\r\n      this.context.updateZoneList(1, event.target.value, this.context.state.zoneTableSort.sort,\r\n         this.context.state.zoneTableSort.sortOrder, this.state.selectedDistrict, this.state.searchQuery)\r\n   }\r\n\r\n   handleZoneEdit = (id) => {\r\n      console.log(id)\r\n   }\r\n\r\n   handlePaginationClick = (event, value) => {\r\n      // this.startLoading();\r\n      // this.context.updateCurrentZonelistPageNumber(value, this.stopLoading)\r\n      this.context.updateZoneList(value, this.context.state.zoneTableRowNumber, this.context.state.zoneTableSort.sort,\r\n         this.context.state.zoneTableSort.sortOrder, this.state.selectedDistrict, this.state.searchQuery)\r\n   }\r\n\r\n   handleSortClick = (sort) => {\r\n      this.setState(preState => {\r\n         return {\r\n            zoneTableSort: {\r\n               sort,\r\n               sortOrder: preState.zoneTableSort.sortOrder == 1 ? -1 : 1\r\n            }\r\n         }\r\n      }, () => {\r\n         this.context.updateZoneList(1, this.context.state.zoneTableRowNumber, this.state.zoneTableSort.sort,\r\n            this.state.zoneTableSort.sortOrder, this.state.selectedDistrict, this.state.searchQuery)\r\n\r\n      })\r\n   }\r\n\r\n   handleZoneDetailsModalOpen = () => {\r\n      this.setState({\r\n         zoneDetailsModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleZoneDetailsModalClose = () => {\r\n      this.setState({\r\n         zoneDetailsModalOpen: false\r\n      })\r\n   }\r\n\r\n   renderZoneDetailsModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.zoneDetailsModalOpen}\r\n            onClose={this.handleZoneDetailsModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.zoneDetailsModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleZoneDetailsModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title=\"Zone Details\"\r\n                        />\r\n                        <CardContent>\r\n                           {\r\n                              this.state.zoneDetails ?\r\n\r\n                                 <Grid container spacing={3}>\r\n                                    <Grid item xs={4}>\r\n                                       <Box display=\"flex\">\r\n                                          <Typography variant=\"h6\" component=\"h6\" gutterBottom>\r\n                                             Zone Name: </Typography>\r\n                                       </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={8}>\r\n                                       <Box alignItems=\"center\" display=\"flex\" style={{ height: '100%' }}>\r\n                                          <Typography variant=\"body1\" gutterBottom>{this.state.zoneDetails.name}</Typography>\r\n                                       </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={4}>\r\n                                       <Box display=\"flex\">\r\n                                          <Typography variant=\"h6\" component=\"h6\" gutterBottom>\r\n                                             District Name: </Typography>\r\n                                       </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={8}>\r\n                                       <Box alignItems=\"center\" display=\"flex\" style={{ height: '100%' }}>\r\n                                          <Typography variant=\"body1\" gutterBottom>\r\n                                             {this.state.zoneDetails.district.name}</Typography>\r\n                                       </Box>\r\n                                    </Grid>\r\n                                 </Grid>\r\n                                 : null\r\n                           }\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n   handleZoneDetails = (id) => {\r\n      fetchZoneDetails(id).then((response) => {\r\n         this.setState({\r\n            zoneDetails: response.data\r\n         }, () => {\r\n            this.setState({\r\n               zoneDetailsModalOpen: true\r\n            })\r\n         })\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n   }\r\n\r\n   // static getDerivedStateFromProps(nextProps, prevState) {\r\n   //    if (prevState.districtList !== nextProps.districtList) {\r\n   //       return {\r\n   //          districtList: nextProps.districtList.map(item => {\r\n   //             item['status'] = false;\r\n   //             return item;\r\n   //          })\r\n   //       };\r\n   //    }\r\n\r\n   //    return null;\r\n   // }\r\n\r\n   componentDidMount() {\r\n      this.context.updateZoneList()\r\n      fetchAllDistricts().then((response) => {\r\n         this.setState({\r\n            districtList: response.data.data.map(item => {\r\n               item['status'] = false;\r\n               return item;\r\n            })\r\n         })\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n   }\r\n\r\n   // shouldComponentUpdate(nextProps) {\r\n   //    // Rendering the component only if  \r\n   //    // passed props value is changed \r\n\r\n   //    if (nextProps !== this.props) {\r\n   //       return true;\r\n   //    } else {\r\n   //       return false;\r\n   //    }\r\n   // }\r\n\r\n   handleDistrictChange = (id) => {\r\n      this.setState({\r\n         districtList: this.state.districtList.map(item => {\r\n            if (item._id === id)\r\n               item['status'] = true;\r\n            else\r\n               item['status'] = false;\r\n\r\n            return item;\r\n         }),\r\n         selectedDistrict: id\r\n      }, () => {\r\n\r\n         this.context.updateZoneList(1, this.context.state.zoneTableRowNumber, this.state.zoneTableSort.sort,\r\n            this.state.zoneTableSort.sortOrder, this.state.selectedDistrict, this.state.searchQuery)\r\n      });\r\n   }\r\n\r\n   handleSearchQueryChange = (searchQuery) => {\r\n      this.setState({\r\n         searchQuery\r\n      }, () => {\r\n         this.context.updateZoneList(1, this.context.state.zoneTableRowNumber, this.state.zoneTableSort.sort,\r\n            this.state.zoneTableSort.sortOrder, this.state.selectedDistrict, this.state.searchQuery)\r\n      })\r\n   }\r\n\r\n   render() {\r\n      console.log(\"zone list rendered\")\r\n      console.log(this.state)\r\n      return (\r\n         <>\r\n            <Grid container spacing={3}>\r\n               <Grid item xs={3}>\r\n                  <Card>\r\n                     <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>Filter By</Typography>\r\n                        <Box mb={2}>\r\n                           <TextField onChange={(e) => { this.handleSearchQueryChange(e.target.value) }} id=\"standard-basic\" label=\"Search By Name\" />\r\n                        </Box>\r\n\r\n                        <Accordion>\r\n                           <AccordionSummary\r\n                              expandIcon={<ExpandMoreIcon />}\r\n                              aria-controls=\"panel1a-content\"\r\n                              id=\"panel1a-header\"\r\n                           >\r\n                              <Typography >District</Typography>\r\n                           </AccordionSummary>\r\n                           <AccordionDetails>\r\n                              <div className=\"accMaxHight\">\r\n                                 {this.state.districtList ?\r\n\r\n                                    this.state.districtList.map((item) => {\r\n                                       return (\r\n                                          <div>\r\n                                             <FormControlLabel\r\n                                                control={\r\n                                                   <Checkbox\r\n                                                      checked={item.status}\r\n                                                      onChange={() => {\r\n                                                         this.handleDistrictChange(item._id)\r\n                                                      }}\r\n                                                      name=\"checkedB\"\r\n                                                      color=\"primary\"\r\n                                                   />\r\n                                                }\r\n                                                label={item.name}\r\n                                             />\r\n                                          </div>\r\n\r\n                                       )\r\n                                    })\r\n\r\n                                    : null\r\n                                 }\r\n                              </div>\r\n                           </AccordionDetails>\r\n                        </Accordion>\r\n                     </CardContent>\r\n                  </Card>\r\n               </Grid>\r\n               <Grid item xs={9}>\r\n\r\n                  {this.context.state.zoneList ?\r\n                     <div className=\"table_wrapper\">\r\n                        {this.state.isloading &&\r\n                           <div className=\"loader_area\">\r\n                              <CircularProgress />\r\n                           </div>\r\n                        }\r\n                        <TableContainer style={{ maxHeight: 500, }} component={Paper}>\r\n                           <Table stickyHeader={true} aria-label=\"simple table\" size=\"small\" >\r\n                              <TableHead>\r\n                                 <TableRow>\r\n                                    <TableCell>Zone Name <IconButton onClick={() => { this.handleSortClick(\"name\") }}>\r\n                                       {\r\n                                          this.state.zoneTableSort.sort == \"name\" ?\r\n                                             this.state.zoneTableSort.sortOrder == 1 ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />\r\n                                             : <ArrowUpwardIcon style={{ opacity: .2 }} />\r\n                                       }\r\n\r\n                                    </IconButton></TableCell>\r\n                                    <TableCell >District Name <IconButton onClick={() => { this.handleSortClick(\"district\") }}>\r\n                                       {\r\n                                          this.state.zoneTableSort.sort == \"district\" ?\r\n                                             this.state.zoneTableSort.sortOrder == 1 ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />\r\n                                             : <ArrowUpwardIcon style={{ opacity: .2 }} />\r\n                                       }\r\n\r\n                                    </IconButton></TableCell>\r\n                                    <TableCell >Actions</TableCell>\r\n                                 </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                 {\r\n                                    this.context.state.zoneList ?\r\n                                       this.context.state.zoneList.data.map((row) => (\r\n\r\n                                          <TableRow key={row._id}>\r\n                                             <TableCell component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                                             <TableCell >{row.district ? row.district.name : null} </TableCell>\r\n                                             <TableCell >\r\n                                                <IconButton onClick={() => this.handleZoneDetails(row._id)} aria-label=\"delete\">\r\n                                                   <VisibilityIcon />\r\n                                                </IconButton>\r\n                                                <IconButton onClick={() => this.props.editZone(row)} aria-label=\"delete\">\r\n                                                   <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton onClick={() => this.handleZoneDelete(row._id)} aria-label=\"delete\">\r\n                                                   <DeleteIcon />\r\n                                                </IconButton>\r\n\r\n                                             </TableCell>\r\n                                          </TableRow>\r\n                                       )) : null\r\n                                 }\r\n                              </TableBody>\r\n\r\n                           </Table>\r\n\r\n                        </TableContainer>\r\n                        <Card>\r\n                           <Box p={2} justifyContent=\"flex-end\" display=\"flex\">\r\n                              <div className=\"pageRowWp\">\r\n                                 <span>Page per row</span>\r\n                                 <TextField\r\n                                    value={this.context.state.zoneTableRowNumber}\r\n                                    style={{ maxWidth: 50, margin: 0 }}\r\n                                    id=\"standard-select-currency-native\"\r\n                                    select\r\n                                    onChange={this.handleRowChange}\r\n                                    SelectProps={{\r\n                                       native: true,\r\n                                    }}\r\n                                 >\r\n                                    <option value=\"5\">5</option>\r\n                                    <option value=\"10\">10</option>\r\n                                    <option value=\"15\">15</option>\r\n                                 </TextField>\r\n                              </div>\r\n                              <Pagination variant=\"outlined\" page={this.context.state.currentZonelistPageNumber} shape=\"rounded\" count={this.context.state.zoneList.page.totalPage}\r\n                                 onChange={(event, value) => { this.handlePaginationClick(event, value) }} />\r\n                           </Box>\r\n                        </Card>\r\n                     </div> : \"no data found\"\r\n                  }\r\n               </Grid>\r\n            </Grid>\r\n\r\n            {this.renderZoneDetailsModal()}\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nZoneList.contextType = AppContext;\r\n\r\nexport default ZoneList;","D:\\work\\hospital-admin\\src\\Api\\district-api.js",[],"D:\\work\\hospital-admin\\src\\Api\\zone-api.js",[],"D:\\work\\hospital-admin\\src\\components\\Area\\DistrictList\\DistrictList.js",["230","231","232","233"],"import React, { Component } from 'react';\r\nimport { AppContext } from '../../../context/AppContextProvider';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from 'axios';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { Box } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { fetchDistrictDetails, editDistrict } from \"../../../Api/district-api\";\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nclass DistrictList extends Component {\r\n\r\n   state = {\r\n      editModalOpen: false,\r\n      submittingEdit: false,\r\n      currentPage: null,\r\n      districtDetailsModalOpen: false,\r\n      districtTableSort: {\r\n         sort: \"name\",\r\n         sortOrder: 1\r\n      },\r\n      districtDetails: null,\r\n      districtName: \"\",\r\n      selectedDistricId: null,\r\n      searchQuery: null,\r\n      inputError: {}\r\n   }\r\n\r\n   handleDistrictDelete = (id) => {\r\n      var r = window.confirm(\"Do you want to delete the item?\");\r\n      if (r == true) {\r\n         axios.get(`http://localhost:5000/admin/api/district/remove?id=${id}`, {\r\n            params: {\r\n\r\n            }\r\n         })\r\n            .then((response) => {\r\n               console.log(response);\r\n               this.context.updateDistrictList()\r\n            })\r\n            .catch(function (error) {\r\n               console.log(error);\r\n            })\r\n            .then(function () {\r\n               // always executed\r\n            });\r\n      }\r\n\r\n\r\n   }\r\n\r\n   handleDistrictEdit = (districtItem) => {\r\n      this.handleEditModalOpen();\r\n      this.setState({\r\n         districtName: districtItem.name,\r\n         selectedDistricId: districtItem._id\r\n      })\r\n   }\r\n\r\n\r\n   handlePaginationClick = (event, value) => {\r\n      this.context.updateDistrictList(value, this.context.state.districtTableRowNumber,\r\n         this.context.state.districtTableSort.sort, this.context.state.districtTableSort.sortOrder, this.state.searchQuery)\r\n   }\r\n\r\n   handleRowChange = (event) => {\r\n      console.log(event.target.value)\r\n      this.context.updateDistrictList(1, event.target.value,\r\n         this.context.state.districtTableSort.sort, this.context.state.districtTableSort.sortOrder, this.state.searchQuery)\r\n   }\r\n\r\n   handleDistrictDetailsModalOpen = () => {\r\n      this.setState({\r\n         districtDetailsModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleDistrictDetailsModalClose = () => {\r\n      this.setState({\r\n         districtDetailsModalOpen: false\r\n      })\r\n   }\r\n\r\n   handleDistrictDetails = (id) => {\r\n      console.log(id)\r\n      fetchDistrictDetails(id).then((response) => {\r\n         this.setState({\r\n            districtDetails: response.data\r\n         }, () => {\r\n            this.setState({\r\n               districtDetailsModalOpen: true\r\n            })\r\n         })\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n   }\r\n\r\n   handleSortClick = (sort) => {\r\n      this.setState(preState => {\r\n         return {\r\n            districtTableSort: {\r\n               sort,\r\n               sortOrder: preState.districtTableSort.sortOrder == 1 ? -1 : 1\r\n            }\r\n         }\r\n      }, () => {\r\n         console.log(this.state)\r\n         this.context.updateDistrictList(1, this.context.state.districtTableRowNumber,\r\n            this.state.districtTableSort.sort, this.state.districtTableSort.sortOrder, this.state.searchQuery)\r\n      })\r\n   }\r\n\r\n   renderDistrictDetailsModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.districtDetailsModalOpen}\r\n            onClose={this.handleDistrictDetailsModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.districtDetailsModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleDistrictDetailsModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title=\"District Details\"\r\n                        />\r\n                        <CardContent>\r\n                           {\r\n                              this.state.districtDetails ?\r\n\r\n                                 <Grid container spacing={3}>\r\n                                    <Grid item xs={6}>\r\n                                       <Box display=\"flex\">\r\n                                          <Typography variant=\"h6\" component=\"h6\" gutterBottom>\r\n                                             District Name: </Typography>\r\n                                       </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                       <Box alignItems=\"center\" display=\"flex\" style={{ height: '100%' }}>\r\n                                          <Typography variant=\"body1\" gutterBottom>{this.state.districtDetails.name}</Typography>\r\n                                       </Box>\r\n                                    </Grid>\r\n                                 </Grid> : null\r\n                           }\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n   handleEditModalOpen = () => {\r\n      this.setState({\r\n         editModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleEditModalClose = () => {\r\n      this.setState({\r\n         editModalOpen: false,\r\n         submittingEdit: false,\r\n      })\r\n   }\r\n\r\n   handleDistrictNameOnChange = (event) => {\r\n      this.setState({\r\n         districtName: event.target.value\r\n      })\r\n   }\r\n\r\n   handleFormSubmit = () => {\r\n      this.setState({\r\n         submittingEdit: true\r\n      }, () => {\r\n         editDistrict(this.state.selectedDistricId, this.state.districtName).then((response) => {\r\n            console.log(response);\r\n            // this.context.addDistrictToContext(response.data[0])\r\n            this.context.updateDistrictList();\r\n            this.handleEditModalClose();\r\n         }).catch((error) => {\r\n            console.log(error);\r\n            console.log({ res: error.response }, \"123\")\r\n            this.setState({\r\n               submittingEdit: false,\r\n               districtNameError: true,\r\n               inputError: error.response && error.response.data\r\n            })\r\n         });\r\n      })\r\n   }\r\n\r\n   renderEditModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.editModalOpen}\r\n            onClose={this.handleEditModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.editModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleEditModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title=\"Edit District\"\r\n                        />\r\n                        <CardContent>\r\n                           <div className=\"form_wrapper\">\r\n                              <form noValidate autoComplete=\"off\">\r\n                                 <TextField\r\n                                    onChange={this.handleDistrictNameOnChange} id=\"standard-basic\"\r\n                                    label=\"District Name\"\r\n                                    value={this.state.districtName}\r\n                                    error={this.state.inputError && this.state.inputError.name ? true : false}\r\n                                    helperText={this.state.inputError && this.state.inputError.name} />\r\n\r\n                                 <Button onClick={this.handleFormSubmit} variant=\"contained\" color=\"primary\">\r\n                                    {this.state.submittingEdit ?\r\n                                       <CircularProgress style={{ marginRight: 5 }} color=\"#fff\" size={18} /> : null}\r\n                                    Submit\r\n                                 </Button>\r\n                              </form>\r\n                           </div>\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n   handleSearchQueryChange = (searchQuery) => {\r\n      this.setState({\r\n         searchQuery\r\n      }, () => {\r\n         this.context.updateDistrictList(1, this.context.state.districtTableRowNumber,\r\n            this.context.state.districtTableSort.sort, this.context.state.districtTableSort.sortOrder,\r\n            this.state.searchQuery)\r\n      })\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.context.updateDistrictList();\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <>\r\n            <Grid container spacing={3}>\r\n               <Grid item xs={3}>\r\n                  <Card>\r\n                     <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>Filter By</Typography>\r\n                        <Box mb={2}>\r\n                           <TextField onChange={(e) => { this.handleSearchQueryChange(e.target.value) }} id=\"standard-basic\" label=\"Search By Name\" />\r\n                        </Box>\r\n                     </CardContent>\r\n                  </Card>\r\n               </Grid>\r\n               <Grid item xs={9}>\r\n                  {this.context.state.districtList ?\r\n                     <div>\r\n                        <TableContainer style={{ maxHeight: 500, }} s component={Paper}>\r\n                           <Table stickyHeader={true} aria-label=\"simple table\" size=\"small\">\r\n                              <TableHead>\r\n                                 <TableRow>\r\n                                    <TableCell >District Name\r\n                                 <IconButton onClick={() => { this.handleSortClick(\"name\") }}>\r\n                                          {\r\n                                             this.state.districtTableSort.sort == \"name\" ?\r\n                                                this.state.districtTableSort.sortOrder == 1 ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />\r\n                                                : <ArrowUpwardIcon style={{ opacity: .2 }} />\r\n                                          }\r\n\r\n                                       </IconButton>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"\" >Actions</TableCell>\r\n                                 </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                 {\r\n                                    this.context.state.districtList.data.length > 0 ?\r\n                                       this.context.state.districtList.data.map((row) => (\r\n                                          <TableRow key={row._id}>\r\n                                             <TableCell component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                                             <TableCell align=\"\">\r\n                                                <IconButton onClick={() => this.handleDistrictDetails(row._id)} aria-label=\"delete\">\r\n                                                   <VisibilityIcon />\r\n                                                </IconButton>\r\n                                                <IconButton onClick={() => this.handleDistrictEdit(row)} aria-label=\"delete\">\r\n                                                   <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton onClick={() => this.handleDistrictDelete(row._id)} aria-label=\"delete\">\r\n                                                   <DeleteIcon />\r\n                                                </IconButton>\r\n\r\n                                             </TableCell>\r\n                                          </TableRow>\r\n                                       )) : <TableCell colSpan={5} align=\"center\" component=\"th\" scope=\"row\">No Data Found</TableCell>\r\n                                 }\r\n                              </TableBody>\r\n                           </Table>\r\n\r\n                        </TableContainer>\r\n                        <Card>\r\n                           <Box p={2} justifyContent=\"flex-end\" display=\"flex\">\r\n                              <div className=\"pageRowWp\">\r\n                                 <span>Page per row</span>\r\n                                 <TextField\r\n                                    value={this.context.state.districtTableRowNumber}\r\n                                    style={{ maxWidth: 50, margin: 0 }}\r\n                                    id=\"standard-select-currency-native\"\r\n                                    select\r\n                                    onChange={this.handleRowChange}\r\n                                    SelectProps={{\r\n                                       native: true,\r\n                                    }}\r\n                                 >\r\n                                    <option value=\"5\">5</option>\r\n                                    <option value=\"10\">10</option>\r\n                                    <option value=\"15\">15</option>\r\n                                 </TextField>\r\n                              </div>\r\n                              <Pagination variant=\"outlined\" shape=\"rounded\" count={this.context.state.districtList.page.totalPage}\r\n                                 onChange={(event, value) => { this.handlePaginationClick(event, value) }} />\r\n                           </Box>\r\n                        </Card>\r\n                     </div> : \"no data found\"\r\n                  }\r\n               </Grid>\r\n            </Grid>\r\n            { this.renderDistrictDetailsModal()}\r\n            { this.renderEditModal()}\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nDistrictList.contextType = AppContext;\r\n\r\nexport default DistrictList;","D:\\work\\hospital-admin\\src\\Api\\hospital-api.js",[],"D:\\work\\hospital-admin\\src\\components\\Hospital\\HospitalList\\HospitalList.js",["234","235","236","237","238","239","240","241","242","243","244","245","246","247"],"D:\\work\\hospital-admin\\src\\components\\Doctor\\Doctor.js",["248"],"D:\\work\\hospital-admin\\src\\Api\\doctor-api.js",[],"D:\\work\\hospital-admin\\src\\components\\Doctor\\DoctorList\\DoctorList.js",["249","250","251","252","253","254","255","256"],"import React, { Component } from 'react';\r\nimport { AppContext } from '../../../context/AppContextProvider';\r\nimport '../style.css';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from 'axios';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { fetchZoneList } from \"../../../Api/zone-api\";\r\nimport { Box, CircularProgress } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { fetchAllDiseaseCat } from \"../../../Api/disease-api\";\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport { fetchDoctorDetails, deleteDoctor } from \"../../../Api/doctor-api\";\r\nimport { fetchAllHospital } from \"../../../Api/hospital-api\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nclass DoctorList extends Component {\r\n\r\n   state = {\r\n      diseaseCatList: [],\r\n      hospitalList: [],\r\n      selectedDiseaseCat: null,\r\n      selectedHospital: null,\r\n      searchQuery: null,\r\n\r\n      currentPage: 1,\r\n      doctorTableSort: {\r\n         sort: \"name\",\r\n         sortOrder: 1\r\n      },\r\n      doctorDetails: null,\r\n      doctorDetailsModalOpen: false,\r\n      isloading: false\r\n   }\r\n\r\n   startLoading = () => {\r\n      this.setState({ isloading: true })\r\n   };\r\n\r\n\r\n   stopLoading = () => {\r\n      this.setState({ isloading: false })\r\n   };\r\n\r\n\r\n   handleDoctorDelete = (id) => {\r\n      var r = window.confirm(\"Do you want to delete the item?\");\r\n      if (r == true) {\r\n         deleteDoctor(id)\r\n            .then((response) => {\r\n               console.log(response);\r\n               this.context.updateDoctorList()\r\n            })\r\n            .catch(function (error) {\r\n               console.log(error);\r\n            })\r\n            .then(function () {\r\n               // always executed\r\n            });\r\n      } else {\r\n\r\n      }\r\n   }\r\n\r\n   handleRowChange = (event) => {\r\n      // console.log(event.target.value)\r\n      // this.setState({\r\n      //    currentPage: 1\r\n      // })\r\n\r\n      this.context.updateDoctorList(1, event.target.value,\r\n         this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, this.state.selectedDiseaseCat,\r\n         this.state.selectedHospital, this.state.searchQuery)\r\n   }\r\n\r\n   handleDoctorEdit = (id) => {\r\n      console.log(id)\r\n   }\r\n\r\n\r\n   handlePaginationClick = (event, value) => {\r\n      // this.startLoading();\r\n      // this.setState({\r\n      //    currentPage: value\r\n      // })\r\n      // this.context.updateCurrentDoctorlistPageNumber(value, this.stopLoading)\r\n      this.context.updateDoctorList(value, this.context.state.doctorTableRowNumber,\r\n         this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, this.state.selectedDiseaseCat,\r\n         this.state.selectedHospital, this.state.searchQuery)\r\n   }\r\n\r\n   handleSortClick = (sort) => {\r\n      this.setState(preState => {\r\n         return {\r\n            doctorTableSort: {\r\n               sort,\r\n               sortOrder: preState.doctorTableSort.sortOrder == 1 ? -1 : 1\r\n            },\r\n            currentPage: 1\r\n         }\r\n      }, () => {\r\n         console.log(this.state)\r\n         // this.context.sortDoctortable(this.state.doctorTableSort.sort, this.state.doctorTableSort.sortOrder)\r\n         this.context.updateDoctorList(1, this.context.state.doctorTableRowNumber,\r\n            this.state.doctorTableSort.sort, this.state.doctorTableSort.sortOrder, this.state.selectedDiseaseCat,\r\n            this.state.selectedHospital, this.state.searchQuery)\r\n      })\r\n   }\r\n\r\n   handleDoctorDetailsModalOpen = () => {\r\n      this.setState({\r\n         doctorDetailsModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleDoctorDetailsModalClose = () => {\r\n      this.setState({\r\n         doctorDetailsModalOpen: false\r\n      })\r\n   }\r\n\r\n   renderDoctorDetailsModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.doctorDetailsModalOpen}\r\n            onClose={this.handleDoctorDetailsModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.doctorDetailsModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleDoctorDetailsModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title=\"Doctor Details\"\r\n                        />\r\n                        <CardContent>\r\n                           {\r\n                              this.state.doctorDetails ?\r\n\r\n                                 <TableContainer component={Paper}>\r\n                                    {this.state.doctorDetails.cover ?\r\n                                       <div style={{\r\n                                          height: 200, backgroundSize: 'cover', backgroundPosition: 'center', marginBottom: 10,\r\n                                          backgroundImage: `url(http://3.6.216.223${this.state.doctorDetails.cover.full})`\r\n                                       }}>\r\n                                       </div> : null\r\n                                    }\r\n                                    <Table size=\"small\" aria-label=\"simple table\">\r\n\r\n                                       <TableBody>\r\n                                          <TableRow>\r\n                                             <TableCell align=\"\"><strong>Doctor Name</strong></TableCell>\r\n                                             <TableCell align=\"\">{this.state.doctorDetails.name}</TableCell>\r\n                                          </TableRow>\r\n                                          <TableRow>\r\n                                             <TableCell align=\"\"><strong>Phone</strong></TableCell>\r\n                                             <TableCell align=\"\">{this.state.doctorDetails.phone}</TableCell>\r\n                                          </TableRow>\r\n                                          <TableRow>\r\n                                             <TableCell align=\"\"><strong>Hospital Name</strong></TableCell>\r\n                                             <TableCell align=\"\">{this.state.doctorDetails.hospital.name}</TableCell>\r\n                                          </TableRow>\r\n                                          <TableRow>\r\n                                             <TableCell align=\"\"><strong>Hospital Address</strong></TableCell>\r\n                                             <TableCell align=\"\">{this.state.doctorDetails.hospital.address}</TableCell>\r\n                                          </TableRow>\r\n                                          <TableRow>\r\n                                             <TableCell align=\"\"><strong>Visiting Fee</strong></TableCell>\r\n                                             <TableCell align=\"\">{this.state.doctorDetails.visitingFee}</TableCell>\r\n                                          </TableRow>\r\n                                          <TableRow>\r\n                                             <TableCell align=\"\"><strong>Description</strong></TableCell>\r\n                                             <TableCell align=\"\">{this.state.doctorDetails.description}</TableCell>\r\n                                          </TableRow>\r\n                                       </TableBody>\r\n                                    </Table>\r\n                                 </TableContainer>\r\n                                 : null\r\n                           }\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n   handleDoctorDetails = (id) => {\r\n      fetchDoctorDetails(id).then((response) => {\r\n         this.setState({\r\n            doctorDetails: response.data\r\n         }, () => {\r\n            this.setState({\r\n               doctorDetailsModalOpen: true\r\n            })\r\n         })\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n   }\r\n\r\n   componentDidMount() {\r\n\r\n      this.context.updateDoctorList();\r\n      fetchAllHospital().then((response) => {\r\n         this.setState({\r\n            hospitalList: response.data.data.map(item => {\r\n               item['status'] = false;\r\n               return item;\r\n            })\r\n         });\r\n\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n\r\n      fetchAllDiseaseCat().then((response) => {\r\n\r\n         this.setState({\r\n            diseaseCatList: response.data.data.map(item => {\r\n               item['status'] = false;\r\n               return item;\r\n            })\r\n         });\r\n\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n\r\n\r\n   }\r\n\r\n   handleDiseaseCatChange = (id) => {\r\n      // this.context.updateDoctorList(1, this.context.state.doctorTableRowNumber,\r\n      //    this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, id)\r\n      this.setState({\r\n         diseaseCatList: this.state.diseaseCatList.map(item => {\r\n            if (item._id === id)\r\n               item['status'] = true;\r\n            else\r\n               item['status'] = false;\r\n\r\n            return item;\r\n         }),\r\n         selectedDiseaseCat: id\r\n      }, () => {\r\n\r\n         this.context.updateDoctorList(1, this.context.state.doctorTableRowNumber,\r\n            this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, this.state.selectedDiseaseCat,\r\n            this.state.selectedHospital, this.state.searchQuery)\r\n\r\n         // let selectedDiseaseCalList = [];\r\n\r\n         // this.state.diseaseCatList.map(item => {\r\n         //    if (item.status) selectedDiseaseCalList.push(item._id)\r\n         // })\r\n\r\n         // this.setState({\r\n         //    selectedDiseaseCalList\r\n         // }, () => {\r\n         //    this.context.updateDoctorList(1, this.context.state.doctorTableRowNumber,\r\n         //       this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, this.state.selectedDiseaseCalList)\r\n         // })\r\n\r\n      });\r\n   }\r\n\r\n   handleHospitalChange = (id) => {\r\n      // this.context.updateDoctorList(1, this.context.state.doctorTableRowNumber,\r\n      //    this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, id)\r\n      this.setState({\r\n         hospitalList: this.state.hospitalList.map(item => {\r\n            if (item._id === id)\r\n               item['status'] = true;\r\n            else\r\n               item['status'] = false;\r\n\r\n            return item;\r\n         }),\r\n         selectedHospital: id\r\n      }, () => {\r\n         this.context.updateDoctorList(1, this.context.state.doctorTableRowNumber,\r\n            this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, this.state.selectedDiseaseCat,\r\n            this.state.selectedHospital, this.state.searchQuery)\r\n\r\n      })\r\n   }\r\n\r\n   handleSearchQueryChange = (searchQuery) => {\r\n      // this.context.updateDoctorList(1, this.context.state.doctorTableRowNumber,\r\n      //    this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, id)\r\n      this.setState({\r\n         searchQuery\r\n      }, () => {\r\n         this.context.updateDoctorList(1, this.context.state.doctorTableRowNumber,\r\n            this.context.state.doctorTableSort.sort, this.context.state.doctorTableSort.sortOrder, this.state.selectedDiseaseCat,\r\n            this.state.selectedHospital, this.state.searchQuery)\r\n\r\n      })\r\n   }\r\n\r\n   render() {\r\n      // console.log(this.props)\r\n      console.log(this.state)\r\n      return (\r\n         <>\r\n            <Grid container spacing={3}>\r\n\r\n               <Grid item xs={3}>\r\n                  <Card>\r\n                     <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>Filter By</Typography>\r\n                        <Box mb={2}>\r\n                           <TextField onChange={(e) => { this.handleSearchQueryChange(e.target.value) }} id=\"standard-basic\" label=\"Search By Name\" />\r\n                        </Box>\r\n\r\n                        <Accordion>\r\n                           <AccordionSummary\r\n                              expandIcon={<ExpandMoreIcon />}\r\n                              aria-controls=\"panel1a-content\"\r\n                              id=\"panel1a-header\"\r\n                           >\r\n                              <Typography >Disease Category</Typography>\r\n                           </AccordionSummary>\r\n                           <AccordionDetails>\r\n                              <div className=\"accMaxHight\">\r\n                                 {this.state.diseaseCatList ?\r\n\r\n                                    this.state.diseaseCatList.map((item) => {\r\n                                       return (\r\n                                          <div>\r\n                                             <FormControlLabel\r\n                                                control={\r\n                                                   <Checkbox\r\n                                                      checked={item.status}\r\n                                                      onChange={() => {\r\n                                                         this.handleDiseaseCatChange(item._id)\r\n                                                      }}\r\n                                                      name=\"checkedB\"\r\n                                                      color=\"primary\"\r\n                                                   />\r\n                                                }\r\n                                                label={item.name}\r\n                                             />\r\n                                          </div>\r\n\r\n                                       )\r\n                                    })\r\n\r\n                                    : null\r\n                                 }\r\n                              </div>\r\n                           </AccordionDetails>\r\n                        </Accordion>\r\n\r\n\r\n                        <Accordion>\r\n                           <AccordionSummary\r\n                              expandIcon={<ExpandMoreIcon />}\r\n                              aria-controls=\"panel2a-content\"\r\n                              id=\"panel2a-header\"\r\n                           >\r\n                              <Typography >Hospital</Typography>\r\n                           </AccordionSummary>\r\n                           <AccordionDetails>\r\n                              <div className=\"accMaxHight\">\r\n\r\n                                 {this.state.hospitalList ?\r\n\r\n                                    this.state.hospitalList.map((item) => {\r\n                                       return (\r\n                                          <div>\r\n                                             <FormControlLabel\r\n                                                control={\r\n                                                   <Checkbox\r\n                                                      checked={item.status}\r\n                                                      onChange={() => {\r\n                                                         this.handleHospitalChange(item._id)\r\n                                                      }}\r\n                                                      name=\"checkedB\"\r\n                                                      color=\"primary\"\r\n                                                   />\r\n                                                }\r\n                                                label={item.name}\r\n                                             />\r\n                                          </div>\r\n\r\n                                       )\r\n                                    })\r\n\r\n                                    : null\r\n                                 }\r\n                              </div>\r\n                           </AccordionDetails>\r\n                        </Accordion>\r\n\r\n                     </CardContent>\r\n                  </Card>\r\n               </Grid>\r\n               <Grid item xs={9}>\r\n                  {this.context.state.doctorList ?\r\n                     <div className=\"table_wrapper\">\r\n                        {this.state.isloading &&\r\n                           <div className=\"loader_area\">\r\n                              <CircularProgress />\r\n                           </div>\r\n                        }\r\n                        <TableContainer style={{ maxHeight: 500, }} component={Paper}>\r\n                           <Table stickyHeader={true} aria-label=\"simple table\" size=\"small\" >\r\n                              <TableHead>\r\n                                 <TableRow>\r\n                                    <TableCell>Doctor Name <IconButton onClick={() => { this.handleSortClick(\"name\") }}>\r\n                                       {\r\n                                          this.state.doctorTableSort.sort == \"name\" ?\r\n                                             this.state.doctorTableSort.sortOrder == 1 ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />\r\n                                             : <ArrowUpwardIcon style={{ opacity: .2 }} />\r\n                                       }\r\n\r\n                                    </IconButton></TableCell>\r\n                                    <TableCell align=\"\">Disease Category</TableCell>\r\n                                    <TableCell align=\"\">Phone</TableCell>\r\n                                    <TableCell align=\"\">visiting Fee <IconButton onClick={() => { this.handleSortClick(\"visitingFee\") }}>\r\n                                       {\r\n                                          this.state.doctorTableSort.sort == \"visitingFee\" ?\r\n                                             this.state.doctorTableSort.sortOrder == 1 ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />\r\n                                             : <ArrowUpwardIcon style={{ opacity: .2 }} />\r\n                                       }\r\n\r\n                                    </IconButton></TableCell>\r\n                                    <TableCell align=\"\">Actions</TableCell>\r\n                                 </TableRow>\r\n                              </TableHead>\r\n                              <TableBody>\r\n                                 {\r\n\r\n                                    this.context.state.doctorList.data.length > 0 ?\r\n                                       this.context.state.doctorList.data.map((row) => (\r\n\r\n                                          <TableRow key={row._id}>\r\n                                             <TableCell component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                                             <TableCell align=\"\">{row.diseaseCategory ? row.diseaseCategory.name : \"\"} </TableCell>\r\n                                             <TableCell align=\"\">{row.phone} </TableCell>\r\n                                             <TableCell align=\"\">{row.visitingFee} </TableCell>\r\n                                             <TableCell align=\"\">\r\n                                                <IconButton onClick={() => this.handleDoctorDetails(row._id)} aria-label=\"delete\">\r\n                                                   <VisibilityIcon />\r\n                                                </IconButton>\r\n                                                <IconButton onClick={() => this.props.editDoctor(row)} aria-label=\"delete\">\r\n                                                   <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton onClick={() => this.handleDoctorDelete(row._id)} aria-label=\"delete\">\r\n                                                   <DeleteIcon />\r\n                                                </IconButton>\r\n                                             </TableCell>\r\n                                          </TableRow>\r\n                                       )) : <TableCell colSpan={5} align=\"center\" component=\"th\" scope=\"row\">No Data Found</TableCell>\r\n\r\n                                 }\r\n                              </TableBody>\r\n\r\n                           </Table>\r\n\r\n                        </TableContainer>\r\n                        <Card>\r\n                           <Box p={2} justifyContent=\"flex-end\" display=\"flex\">\r\n                              <div className=\"pageRowWp\">\r\n                                 <span>Page per row</span>\r\n                                 <TextField\r\n\r\n                                    style={{ maxWidth: 50, margin: 0 }}\r\n                                    id=\"standard-select-currency-native\"\r\n                                    select\r\n                                    value={this.context.state.doctorTableRowNumber}\r\n                                    onChange={this.handleRowChange}\r\n                                    SelectProps={{\r\n                                       native: true,\r\n                                    }}\r\n                                 >\r\n                                    <option value=\"5\">5</option>\r\n                                    <option value=\"10\">10</option>\r\n                                    <option value=\"15\">15</option>\r\n                                 </TextField>\r\n                              </div>\r\n                              <Pagination variant=\"outlined\" shape=\"rounded\" page={this.context.state.currentDoctorlistPageNumber} count={this.context.state.doctorList.page.totalPage}\r\n                                 onChange={(event, value) => { this.handlePaginationClick(event, value) }} />\r\n                           </Box>\r\n                        </Card>\r\n                     </div> : \"no data found\"\r\n                  }\r\n               </Grid>\r\n            </Grid>\r\n\r\n            {this.renderDoctorDetailsModal()}\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nDoctorList.contextType = AppContext;\r\n\r\nexport default DoctorList;","D:\\work\\hospital-admin\\src\\components\\Service\\Service.js",["257","258"],"D:\\work\\hospital-admin\\src\\Api\\service-api.js",[],"D:\\work\\hospital-admin\\src\\components\\Service\\ServiceList\\ServiceList.js",["259","260","261","262","263","264","265","266","267"],"D:\\work\\hospital-admin\\src\\components\\DiseaseCategory\\DiseaseCategory.js",["268","269","270"],"import React, { Component } from 'react';\r\nimport { AppContext } from '../../context/AppContextProvider';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import './style.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { fetchAllHospital } from \"../../Api/hospital-api\";\r\nimport { addDisease, editDisease } from \"../../Api/disease-api\";\r\nimport DiseaseCategoryList from './DiseaseCategoryList/DiseaseCategoryList';\r\n\r\nclass DiseaseCategory extends Component {\r\n\r\n   state = {\r\n      diseaseList: null,\r\n      createModalOpen: false,\r\n      submittingCreate: false,\r\n      name: null,\r\n      inputError: {},\r\n      editForm: false\r\n   }\r\n\r\n   handleCreateModalOpen = () => {\r\n      this.setState({\r\n         createModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleCreateModalClose = () => {\r\n      this.setState({\r\n         createModalOpen: false,\r\n         inputError: {},\r\n         name: null,\r\n         editForm: false\r\n\r\n      })\r\n   }\r\n\r\n   handleNameChange = (event) => {\r\n      this.setState({\r\n         name: event.target.value\r\n      })\r\n   }\r\n\r\n\r\n   handleFormSubmit = () => {\r\n      if (this.state.editForm) {\r\n         this.setState({\r\n            submittingCreate: true\r\n         }, () => {\r\n            editDisease(this.state.diseaseId, this.state.name)\r\n               .then((response) => {\r\n                  console.log(response);\r\n                  this.handleCreateModalClose();\r\n                  this.context.updateDiseaseCatList();\r\n               })\r\n               .catch((error) => {\r\n                  console.log(error);\r\n                  this.setState({\r\n                     submittingCreate: false,\r\n                     inputError: error.response && error.response.data\r\n                  })\r\n               });\r\n         })\r\n      }\r\n      else {\r\n         this.setState({\r\n            submittingCreate: true\r\n         }, () => {\r\n            addDisease(this.state.name)\r\n               .then((response) => {\r\n                  console.log(response);\r\n                  this.handleCreateModalClose();\r\n                  this.context.updateDiseaseCatList();\r\n               })\r\n               .catch((error) => {\r\n                  console.log(error);\r\n                  this.setState({\r\n                     submittingCreate: false,\r\n                     inputError: error.response && error.response.data\r\n                  })\r\n               });\r\n         })\r\n      }\r\n\r\n   }\r\n\r\n   renderCreateModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.createModalOpen}\r\n            onClose={this.handleCreateModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.createModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleCreateModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title={this.state.editForm ? \"Edit isease Category\" : \"Add isease Category\"}\r\n\r\n                        />\r\n                        <CardContent>\r\n                           <div className=\"form_wrapper\">\r\n                              <form noValidate autoComplete=\"off\">\r\n                                 <TextField\r\n                                    value={this.state.name}\r\n                                    error={this.state.inputError && this.state.inputError.name ? true : false}\r\n                                    helperText={this.state.inputError && this.state.inputError.name}\r\n                                    onChange={this.handleNameChange} id=\"standard-basic\" label=\"Disease Category Name\" />\r\n\r\n                                 <Button onClick={this.handleFormSubmit} variant=\"contained\" color=\"primary\">\r\n                                    Submit\r\n                                 </Button>\r\n                              </form>\r\n                           </div>\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n   editDiseaseCategory = (disCat) => {\r\n      this.setState({\r\n         diseaseId: disCat._id,\r\n         name: disCat.name,\r\n         editForm: true\r\n      }, () => {\r\n         this.handleCreateModalOpen();\r\n      })\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <DiseaseCategoryList editDiseaseCategory={this.editDiseaseCategory} />\r\n            {this.renderCreateModal()}\r\n            <Fab onClick={this.handleCreateModalOpen} color=\"primary\" variant=\"extended\" aria-label=\"add\" className=\"addIcon\">\r\n               <AddIcon />\r\n               Add Disease Category\r\n            </Fab>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nDiseaseCategory.contextType = AppContext;\r\nexport default DiseaseCategory;","D:\\work\\hospital-admin\\src\\Api\\disease-api.js",[],"D:\\work\\hospital-admin\\src\\components\\DiseaseCategory\\DiseaseCategoryList\\DiseaseCategoryList.js",["271","272","273","274","275","276","277"],"import React, { Component } from 'react';\r\nimport { AppContext } from '../../../context/AppContextProvider';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from 'axios';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { fetchZoneList } from \"../../../Api/zone-api\";\r\nimport { Box, CircularProgress } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Card from '@material-ui/core/Card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { deleteDiseaseCat } from \"../../../Api/disease-api\";\r\n\r\nclass DiseaseCategoryList extends Component {\r\n\r\n   state = {\r\n      currentPage: 1,\r\n      diseaseCatTableSort: {\r\n         sort: \"name\",\r\n         sortOrder: 1\r\n      },\r\n      diseaseCatDetails: null,\r\n      diseaseCatDetailsModalOpen: false,\r\n      isloading: false\r\n   }\r\n\r\n   startLoading = () => {\r\n      this.setState({ isloading: true })\r\n   };\r\n\r\n\r\n   stopLoading = () => {\r\n      this.setState({ isloading: false })\r\n   };\r\n\r\n\r\n   handleDiseaseCatDelete = (id) => {\r\n\r\n      var r = window.confirm(\"Do you want to delete the item?\");\r\n      if (r == true) {\r\n         deleteDiseaseCat(id)\r\n            .then((response) => {\r\n               console.log(response);\r\n               this.context.updateDiseaseCatList()\r\n            })\r\n            .catch(function (error) {\r\n               console.log(error);\r\n            })\r\n            .then(function () {\r\n               // always executed\r\n            });\r\n      } else {\r\n\r\n      }\r\n   }\r\n\r\n   handleRowChange = (event) => {\r\n      console.log(event.target.value)\r\n      this.context.updateDiseaseCatList(1, event.target.value, this.context.state.diseaseCatTableSort.sort,\r\n         this.context.state.diseaseCatTableSort.sortOrder)\r\n   }\r\n\r\n   handleDiseaseCatEdit = (id) => {\r\n      console.log(id)\r\n   }\r\n\r\n\r\n   handlePaginationClick = (event, value) => {\r\n      // this.startLoading();\r\n      this.context.updateDiseaseCatList(value, this.context.state.diseaseCatTableRowNumber,\r\n         this.context.state.diseaseCatTableSort.sort, this.context.state.diseaseCatTableSort.sortOrder)\r\n      // this.context.updateCurrentDiseaseCatlistPageNumber(value, this.stopLoading)\r\n   }\r\n\r\n   handleSortClick = (sort) => {\r\n      this.setState(preState => {\r\n         return {\r\n            diseaseCatTableSort: {\r\n               sort,\r\n               sortOrder: preState.diseaseCatTableSort.sortOrder == 1 ? -1 : 1\r\n            },\r\n            currentPage: 1\r\n         }\r\n      }, () => {\r\n         console.log(this.state)\r\n         // this.context.sortDiseaseCattable(this.state.diseaseCatTableSort.sort,\r\n         //    this.state.diseaseCatTableSort.sortOrder)\r\n\r\n         this.context.updateDiseaseCatList(1, this.context.state.diseaseCatTableRowNumber, this.state.diseaseCatTableSort.sort,\r\n            this.state.diseaseCatTableSort.sortOrder)\r\n      })\r\n   }\r\n\r\n   handleDiseaseCatDetailsModalOpen = () => {\r\n      this.setState({\r\n         diseaseCatDetailsModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleDiseaseCatDetailsModalClose = () => {\r\n      this.setState({\r\n         diseaseCatDetailsModalOpen: false\r\n      })\r\n   }\r\n\r\n   renderDiseaseCatDetailsModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.diseaseCatDetailsModalOpen}\r\n            onClose={this.handleDiseaseCatDetailsModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.diseaseCatDetailsModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleDiseaseCatDetailsModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title=\"Service Details\"\r\n                        />\r\n                        <CardContent>\r\n                           {\r\n                              this.state.diseaseCatDetails ?\r\n                                 <TableContainer component={Paper}>\r\n                                    <Table size=\"small\" aria-label=\"simple table\">\r\n                                       <TableBody>\r\n                                          <TableRow>\r\n                                             <TableCell align=\"\"><strong>Disease Category Name</strong></TableCell>\r\n                                             <TableCell align=\"\">{this.state.diseaseCatDetails.name}</TableCell>\r\n                                          </TableRow>\r\n                                       </TableBody>\r\n                                    </Table>\r\n                                 </TableContainer>\r\n                                 : null\r\n                           }\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n   handleDiseaseCatDetails = (id) => {\r\n      // fetchDiseaseCatDetails(id).then((response) => {\r\n      //    this.setState({\r\n      //       diseaseCatDetails: response.data\r\n      //    }, () => {\r\n      //       this.setState({\r\n      //          diseaseCatDetailsModalOpen: true\r\n      //       })\r\n      //    })\r\n      //    console.log(response);\r\n      // })\r\n      //    .catch(function (error) {\r\n      //       console.log(error);\r\n      //    })\r\n      //    .then(function () {\r\n      //       // always executed\r\n      //    });\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.context.updateDiseaseCatList()\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <>\r\n            {this.context.state.diseaseCatList ?\r\n               <div className=\"table_wrapper\">\r\n                  {this.state.isloading &&\r\n                     <div className=\"loader_area\">\r\n                        <CircularProgress />\r\n                     </div>\r\n                  }\r\n                  <TableContainer style={{ maxHeight: 500, }} component={Paper}>\r\n                     <Table stickyHeader={true} aria-label=\"simple table\" size=\"small\" >\r\n                        <TableHead>\r\n                           <TableRow>\r\n                              <TableCell>Disease Category Name <IconButton onClick={() => { this.handleSortClick(\"name\") }}>\r\n                                 {\r\n                                    this.state.diseaseCatTableSort.sort == \"name\" ?\r\n                                       this.state.diseaseCatTableSort.sortOrder == 1 ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />\r\n                                       : <ArrowUpwardIcon style={{ opacity: .2 }} />\r\n                                 }\r\n\r\n                              </IconButton></TableCell>\r\n                              <TableCell align=\"\">Actions</TableCell>\r\n                           </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                           {\r\n                              this.context.state.diseaseCatList ?\r\n                                 this.context.state.diseaseCatList.data.map((row) => (\r\n\r\n                                    <TableRow key={row._id}>\r\n                                       <TableCell component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                                       <TableCell align=\"\">\r\n                                          <IconButton onClick={() => this.handleDiseaseCatDetails(row._id)} aria-label=\"delete\">\r\n                                             <VisibilityIcon />\r\n                                          </IconButton>\r\n                                          <IconButton onClick={() => this.props.editDiseaseCategory(row)} aria-label=\"delete\">\r\n                                             <EditIcon />\r\n                                          </IconButton>\r\n                                          <IconButton onClick={() => this.handleDiseaseCatDelete(row._id)} aria-label=\"delete\">\r\n                                             <DeleteIcon />\r\n                                          </IconButton>\r\n                                       </TableCell>\r\n                                    </TableRow>\r\n                                 )) : null\r\n                           }\r\n                        </TableBody>\r\n\r\n                     </Table>\r\n\r\n                  </TableContainer>\r\n                  <Card>\r\n                     <Box p={2} justifyContent=\"flex-end\" display=\"flex\">\r\n                        <div className=\"pageRowWp\">\r\n                           <span>Page per row</span>\r\n                           <TextField\r\n\r\n                              style={{ maxWidth: 50, margin: 0 }}\r\n                              id=\"standard-select-currency-native\"\r\n                              select\r\n                              value={this.context.state.diseaseCatTableRowNumber}\r\n                              onChange={this.handleRowChange}\r\n                              SelectProps={{\r\n                                 native: true,\r\n                              }}\r\n                           >\r\n                              <option value=\"5\">5</option>\r\n                              <option value=\"10\">10</option>\r\n                              <option value=\"15\">15</option>\r\n                           </TextField>\r\n                        </div>\r\n                        <Pagination variant=\"outlined\" page={this.context.state.currentDiseaseCatlistPageNumber} shape=\"rounded\"\r\n                           count={this.context.state.diseaseCatList.page.totalPage}\r\n                           onChange={(event, value) => { this.handlePaginationClick(event, value) }} />\r\n                     </Box>\r\n                  </Card>\r\n               </div> : \"no data found\"\r\n            }\r\n            {this.renderDiseaseCatDetailsModal()}\r\n         </>\r\n      );\r\n   }\r\n}\r\n\r\nDiseaseCategoryList.contextType = AppContext;\r\n\r\nexport default DiseaseCategoryList;","D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageHandlerModal.jsx",[],"D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\ImageControl.jsx",["278"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport PropTypes from 'prop-types'\r\nimport { AppBar, Tabs, Tab, Box, CircularProgress, Fab } from '@material-ui/core'\r\nimport { Send as SendIcon, PhotoLibrary as PhotoLibraryIcon, CloudUpload as CloudUploadIcon } from '@material-ui/icons'\r\nimport ThumbImage from './ThumbImage/ThumbImage'\r\nimport UploadImage from './UploadImage/UploadImage'\r\nimport './ImageControl.css'\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>{children}</Box>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n}\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  }\r\n}\r\n\r\nconst AllImages = ({ closeModal, getImageData, selectOneMood, prevSelectedImageIds }) => {\r\n  const [value, setValue] = useState(0)\r\n  const [imageList, setImageList] = useState([])\r\n  const [resError, setResError] = useState('')\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [selectImage, setSelectImage] = useState([])\r\n  const [isInitialize, setIsInitialize] = useState(false)\r\n\r\n  useEffect(() => {\r\n    axios.get(`http://localhost:5000/admin/api/image`)\r\n      .then(res => setImageList(res.data.data.reverse()))\r\n      .then(() => setIsLoading(false))\r\n      .catch(err => setResError(err.message))\r\n      .then(() => setIsLoading(false))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // if(prevSelectedImageIds)\r\n     \r\n    if(prevSelectedImageIds.length > 0) {\r\n      setSelectImage(prevSelectedImageIds)\r\n    }\r\n  }, [])\r\n\r\n  // delete image handler\r\n  const deleteImageHandler = id => {\r\n    axios.get(`http://localhost:5000/admin/api/image/remove?id=${id}`)\r\n      .then(() => updateImageList(id))\r\n      .catch(err => setResError(err.message))\r\n  }\r\n\r\n\r\n  // upload image handler \r\n  const uploadImageHandler = (uploadImageInfo) => {\r\n    axios.post(`http://localhost:5000/admin/api/image/add/`, uploadImageInfo)\r\n      .then(res => {\r\n        const preImgList = [...imageList]\r\n        preImgList.unshift(res.data[0])\r\n        setImageList(preImgList)\r\n      })\r\n      .then(() => setValue(0))\r\n      .catch(err => setResError(err.message))\r\n  }\r\n\r\n  // update image state list after delete image handler\r\n  const updateImageList = id => {\r\n    // remove image from image list\r\n    const prevImage = [...imageList]\r\n    const selectedImgIndex = prevImage.findIndex(el => el._id === id)\r\n    prevImage.splice(selectedImgIndex, 1)\r\n    setImageList(prevImage)\r\n\r\n    // remove image id from selected image list\r\n    const prevSelectImage = [...selectImage]\r\n    const prevSelectImageID = prevSelectImage.findIndex(el => el._id === id)\r\n    if (prevSelectImageID === -1) {\r\n      prevSelectImage.splice(prevSelectImageID, 1)\r\n      setSelectImage(prevSelectImage)\r\n    }\r\n  }\r\n\r\n  // select multi image\r\n  const selectMultiImageHandler = (id) => {\r\n    const prevSelectImage = [...selectImage]\r\n    if (selectOneMood) {\r\n      // console.log(id)\r\n      setIsInitialize(true)\r\n      setSelectImage([id])\r\n      return\r\n    }\r\n    const prevSelectImageID = selectImage.findIndex(el => el === id)\r\n    if (prevSelectImageID === -1) {\r\n      prevSelectImage.push(id)\r\n      setIsInitialize(true)\r\n    } else {\r\n      prevSelectImage.splice(prevSelectImageID, 1)\r\n      setIsInitialize(true)\r\n    }\r\n    setSelectImage(prevSelectImage)\r\n  }\r\n\r\n  // check is image is selected\r\n  const checkIsImageSelected = (id) => selectImage.some(el => el === id)\r\n\r\n  // send selected image data id\r\n  const sendSelectedData = (event) => {\r\n    getImageData(selectImage)\r\n    closeModal()\r\n  }\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue)\r\n  }\r\n\r\n  const PhotoLibraryTab = <div className='Tab'>\r\n    <p>Photo Library</p>\r\n    <PhotoLibraryIcon />\r\n  </div>\r\n\r\n  const UploadPhotoTab = <div className='Tab'>\r\n    <p>Upload Photo</p>\r\n    <CloudUploadIcon />\r\n  </div>\r\n\r\n  return (\r\n    <div className='Image_control' >\r\n      <AppBar position=\"static\" color='default'>\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n          <Tab label={PhotoLibraryTab} {...a11yProps(0)} />\r\n          <Tab label={UploadPhotoTab} {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n\r\n      <TabPanel value={value} index={0}>\r\n        {selectImage.length || isInitialize ?\r\n          <Fab variant=\"extended\" onClick={sendSelectedData} className='Done_button' aria-label=\"add\" >\r\n            <SendIcon className='Done_button_icon' />\r\n            Done\r\n          </Fab> : null}\r\n\r\n        {!resError ?\r\n          <>\r\n            <Box >\r\n              <div className='Custom_box'>\r\n                {isLoading ? <div className='Loading'>\r\n                  <CircularProgress />\r\n                  <CircularProgress color=\"secondary\" />\r\n                </div> :\r\n                  <>\r\n                    {!imageList.length > 0\r\n                      ? <h1 className='No_image'>No Image Found !!!</h1>\r\n                      : <>\r\n                        {imageList.map(image => (\r\n                          <ThumbImage\r\n                            key={image._id}\r\n                            imageInfo={image}\r\n                            deleteImage={() => deleteImageHandler(image._id)}\r\n                            ThisImageIsSelected={checkIsImageSelected(image._id)}\r\n                            selectMultiImage={() => selectMultiImageHandler(image._id)}\r\n                          />\r\n                        ))}\r\n                      </>\r\n                    }\r\n                  </>\r\n                }\r\n              </div>\r\n            </Box>\r\n          </>\r\n          : <h1 className='ErrorMSG'>{resError}</h1>\r\n        }\r\n      </TabPanel>\r\n\r\n      <TabPanel value={value} index={1}>\r\n        <UploadImage uploadImageHandler={(info) => uploadImageHandler(info)} />\r\n      </TabPanel>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AllImages\r\n\r\n\r\n","D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\UploadImage\\UploadImage.jsx",[],"D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\ThumbImage\\ThumbImage.jsx",[],"D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\Helper\\Helper.js",[],"D:\\work\\hospital-admin\\src\\components\\ImageHandlerModal\\ImageControl\\UploadImage\\ImageUploader\\ImageUploader.jsx",[],"D:\\work\\hospital-admin\\src\\components\\Billing\\Billing.js",["279","280","281"],"import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { AppContext } from '../../context/AppContextProvider';\r\n\r\nimport './style.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { fetchAllHospital } from \"../../Api/hospital-api\";\r\nimport { fetchAllDiseaseCat } from \"../../Api/disease-api\";\r\nimport { addDoctor, editDoctor } from \"../../Api/doctor-api\";\r\nimport BillingList from './BillingList/BillingList';\r\n\r\nclass Billing extends Component {\r\n\r\n   state = {\r\n      hospitalList: null,\r\n      diseaseCatList: null,\r\n      createModalOpen: false,\r\n      submittingCreate: false,\r\n      selectedHospital: null,\r\n      selectedDiseaseCategory: null,\r\n      name: null, hospital: null, visitingFee: null,\r\n      phone: null, cover: null,\r\n      inputError: {}\r\n   }\r\n\r\n   handleCreateModalOpen = () => {\r\n      this.setState({\r\n         createModalOpen: true\r\n      })\r\n   }\r\n\r\n   handleCreateModalClose = () => {\r\n      this.setState({\r\n         createModalOpen: false,\r\n         doctorId: null,\r\n         name: null,\r\n         selectedHospital: null,\r\n         selectedDiseaseCategory: null,\r\n         visitingFee: null,\r\n         editForm: false\r\n      })\r\n   }\r\n\r\n   handleNameChange = (event) => {\r\n      this.setState({\r\n         name: event.target.value\r\n      })\r\n   }\r\n\r\n   handleVisitingFeeChange = (event) => {\r\n      this.setState({\r\n         visitingFee: event.target.value\r\n      })\r\n   };\r\n\r\n   handleHospitalChange = (event) => {\r\n      this.setState({\r\n         selectedHospital: event.target.value\r\n      })\r\n   }\r\n\r\n   handlediseaseCategoryChange = (event) => {\r\n      this.setState({\r\n         selectedDiseaseCategory: event.target.value\r\n      })\r\n   }\r\n\r\n   handleFormSubmit = () => {\r\n      if (this.state.editForm) {\r\n         this.setState({\r\n            submittingCreate: true\r\n         }, () => {\r\n            editDoctor(this.state.doctorId, this.state.name, this.state.selectedHospital, this.state.selectedDiseaseCategory, this.state.visitingFee,\r\n               \"789-461-3214\", \"600bfdc59032b3a812a5a32d\")\r\n               .then((response) => {\r\n                  console.log(response);\r\n                  this.handleCreateModalClose();\r\n                  this.context.updateDoctorList();\r\n               })\r\n               .catch((error) => {\r\n                  console.log(error);\r\n                  this.setState({\r\n                     submittingCreate: false,\r\n                     inputError: error.response && error.response.data\r\n                  })\r\n               });\r\n         })\r\n      }\r\n      else {\r\n         this.setState({\r\n            submittingCreate: true\r\n         }, () => {\r\n            addDoctor(this.state.name, this.state.selectedHospital, this.state.selectedDiseaseCategory, this.state.visitingFee,\r\n               \"789-461-3214\", \"600bfdc59032b3a812a5a32d\")\r\n               .then((response) => {\r\n                  console.log(response);\r\n                  this.handleCreateModalClose();\r\n                  this.context.updateDoctorList();\r\n               })\r\n               .catch((error) => {\r\n                  console.log(error);\r\n                  this.setState({\r\n                     submittingCreate: false,\r\n                     inputError: error.response && error.response.data\r\n                  })\r\n               });\r\n         })\r\n      }\r\n   }\r\n\r\n   renderCreateModal = () => {\r\n      return (\r\n         <Modal\r\n            className=\"modal\"\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            open={this.state.createModalOpen}\r\n            onClose={this.handleCreateModalClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n               timeout: 500,\r\n            }}\r\n         >\r\n            <Fade in={this.state.createModalOpen}>\r\n               <Grid container spacing={3}>\r\n                  <Grid item xs={6} className=\"col_center\">\r\n                     <Card>\r\n                        <CardHeader\r\n                           action={\r\n                              <IconButton onClick={this.handleCreateModalClose} aria-label=\"settings\">\r\n                                 <CloseIcon />\r\n                              </IconButton>\r\n                           }\r\n                           title=\"Add Doctor\"\r\n                        />\r\n                        <CardContent>\r\n                           <div className=\"form_wrapper\">\r\n                              <form noValidate autoComplete=\"off\">\r\n                                 <TextField\r\n                                    value={this.state.name}\r\n                                    error={this.state.inputError && this.state.inputError.name ? true : false}\r\n                                    helperText={this.state.inputError && this.state.inputError.name}\r\n                                    onChange={this.handleNameChange} id=\"standard-basic\" label=\"Doctor Name\" />\r\n\r\n                                 <TextField\r\n                                    id=\"standard-select-currency\"\r\n                                    select\r\n                                    label=\"Select Hospital\"\r\n                                    error={this.state.inputError && this.state.inputError.hospital ? true : false}\r\n                                    elperText={this.state.inputError && this.state.inputError.hospital}\r\n                                    value={this.state.selectedHospital}\r\n                                    onChange={this.handleHospitalChange}\r\n                                 >\r\n                                    {\r\n                                       this.state.hospitalList ?\r\n                                          this.state.hospitalList.data.map((option) => (\r\n                                             <MenuItem key={option._id} value={option._id}>\r\n                                                {option.name}\r\n                                             </MenuItem>\r\n                                          )) : null\r\n                                    }\r\n                                 </TextField>\r\n                                 <TextField\r\n                                    id=\"standard-select-currency\"\r\n                                    select\r\n                                    label=\"Select Disease Category\"\r\n                                    error={this.state.inputError && this.state.inputError.diseaseCategory ? true : false}\r\n                                    elperText={this.state.inputError && this.state.inputError.diseaseCategory}\r\n                                    value={this.state.selectedDiseaseCategory}\r\n                                    onChange={this.handlediseaseCategoryChange}\r\n                                 >\r\n                                    {\r\n                                       this.state.diseaseCatList ?\r\n                                          this.state.diseaseCatList.data.map((option) => (\r\n                                             <MenuItem key={option._id} value={option._id}>\r\n                                                {option.name}\r\n                                             </MenuItem>\r\n                                          )) : null\r\n                                    }\r\n                                 </TextField>\r\n                                 <TextField\r\n                                    value={this.state.visitingFee}\r\n                                    error={this.state.inputError && this.state.inputError.visitingFee ? true : false}\r\n                                    helperText={this.state.inputError && this.state.inputError.visitingFee}\r\n                                    onChange={this.handleVisitingFeeChange} id=\"standard-basic\" label=\"visiting Fee\" />\r\n\r\n                                 <Button onClick={this.handleFormSubmit} variant=\"contained\" color=\"primary\">\r\n                                    Submit\r\n                                 </Button>\r\n                              </form>\r\n                           </div>\r\n                        </CardContent>\r\n                     </Card>\r\n                  </Grid>\r\n               </Grid>\r\n            </Fade>\r\n         </Modal >\r\n      )\r\n   }\r\n\r\n   componentDidMount() {\r\n      fetchAllHospital().then((response) => {\r\n         this.setState({\r\n            hospitalList: response.data\r\n         })\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n\r\n      fetchAllDiseaseCat().then((response) => {\r\n         this.setState({\r\n            diseaseCatList: response.data\r\n         })\r\n         console.log(response);\r\n      })\r\n         .catch(function (error) {\r\n            console.log(error);\r\n         })\r\n         .then(function () {\r\n            // always executed\r\n         });\r\n   }\r\n   // this.state.name, this.state.selectedHospital, this.state.selectedDiseaseCategory, this.state.visitingFee,\r\n   editDoctor = (doctor) => {\r\n      this.setState({\r\n         doctorId: doctor._id,\r\n         name: doctor.name,\r\n         selectedHospital: doctor.hospital._id,\r\n         selectedDiseaseCategory: doctor.diseaseCategory._id,\r\n         visitingFee: doctor.visitingFee,\r\n         editForm: true\r\n      }, () => {\r\n         this.handleCreateModalOpen()\r\n\r\n      })\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <BillingList editDoctor={this.editDoctor} />\r\n            {this.renderCreateModal()}\r\n            {/* <Fab onClick={this.handleCreateModalOpen} color=\"primary\" variant=\"extended\" aria-label=\"add\" className=\"addIcon\">\r\n               <AddIcon />\r\n               Add Billing\r\n            </Fab> */}\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\n\r\nBilling.contextType = AppContext;\r\n\r\nexport default Billing;","D:\\work\\hospital-admin\\src\\components\\Billing\\BillingList\\BillingList.js",["282","283","284","285","286","287","288","289"],"D:\\work\\hospital-admin\\src\\components\\Customer\\Staff.js",["290","291"],"D:\\work\\hospital-admin\\src\\components\\Customer\\StaffList\\StaffList.js",["292","293","294","295","296","297","298","299","300","301","302","303","304","305","306"],"D:\\work\\hospital-admin\\src\\Api\\staff-api.js",[],"D:\\work\\hospital-admin\\src\\components\\Staff\\Staff.js",["307","308"],"D:\\work\\hospital-admin\\src\\components\\Staff\\StaffList\\StaffList.js",["309","310","311","312","313","314"],"D:\\work\\hospital-admin\\src\\Api\\customer-api.js",[],"D:\\work\\hospital-admin\\src\\Api\\billing-api.js",[],{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","severity":1,"message":"320","line":6,"column":4,"nodeType":"321","messageId":"322","endLine":6,"endColumn":17},{"ruleId":"319","severity":1,"message":"323","line":7,"column":4,"nodeType":"321","messageId":"322","endLine":7,"endColumn":14},{"ruleId":"319","severity":1,"message":"323","line":2,"column":17,"nodeType":"321","messageId":"322","endLine":2,"endColumn":27},{"ruleId":"319","severity":1,"message":"324","line":4,"column":25,"nodeType":"321","messageId":"322","endLine":4,"endColumn":29},{"ruleId":"319","severity":1,"message":"325","line":5,"column":20,"nodeType":"321","messageId":"322","endLine":5,"endColumn":24},{"ruleId":"319","severity":1,"message":"326","line":6,"column":4,"nodeType":"321","messageId":"322","endLine":6,"endColumn":10},{"ruleId":"319","severity":1,"message":"327","line":6,"column":12,"nodeType":"321","messageId":"322","endLine":6,"endColumn":23},{"ruleId":"319","severity":1,"message":"328","line":6,"column":25,"nodeType":"321","messageId":"322","endLine":6,"endColumn":38},{"ruleId":"319","severity":1,"message":"329","line":6,"column":40,"nodeType":"321","messageId":"322","endLine":6,"endColumn":61},{"ruleId":"319","severity":1,"message":"330","line":6,"column":63,"nodeType":"321","messageId":"322","endLine":6,"endColumn":84},{"ruleId":"319","severity":1,"message":"331","line":7,"column":4,"nodeType":"321","messageId":"322","endLine":7,"endColumn":12},{"ruleId":"319","severity":1,"message":"332","line":7,"column":14,"nodeType":"321","messageId":"322","endLine":7,"endColumn":23},{"ruleId":"319","severity":1,"message":"333","line":7,"column":25,"nodeType":"321","messageId":"322","endLine":7,"endColumn":41},{"ruleId":"319","severity":1,"message":"334","line":7,"column":43,"nodeType":"321","messageId":"322","endLine":7,"endColumn":48},{"ruleId":"319","severity":1,"message":"335","line":7,"column":50,"nodeType":"321","messageId":"322","endLine":7,"endColumn":60},{"ruleId":"319","severity":1,"message":"336","line":7,"column":62,"nodeType":"321","messageId":"322","endLine":7,"endColumn":68},{"ruleId":"319","severity":1,"message":"337","line":7,"column":70,"nodeType":"321","messageId":"322","endLine":7,"endColumn":81},{"ruleId":"319","severity":1,"message":"338","line":7,"column":83,"nodeType":"321","messageId":"322","endLine":7,"endColumn":89},{"ruleId":"319","severity":1,"message":"339","line":11,"column":22,"nodeType":"321","messageId":"322","endLine":11,"endColumn":32},{"ruleId":"319","severity":1,"message":"340","line":11,"column":34,"nodeType":"321","messageId":"322","endLine":11,"endColumn":46},{"ruleId":"319","severity":1,"message":"341","line":11,"column":54,"nodeType":"321","messageId":"322","endLine":11,"endColumn":59},{"ruleId":"319","severity":1,"message":"342","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":14},{"ruleId":"319","severity":1,"message":"323","line":12,"column":16,"nodeType":"321","messageId":"322","endLine":12,"endColumn":26},{"ruleId":"319","severity":1,"message":"343","line":12,"column":28,"nodeType":"321","messageId":"322","endLine":12,"endColumn":33},{"ruleId":"319","severity":1,"message":"320","line":12,"column":44,"nodeType":"321","messageId":"322","endLine":12,"endColumn":57},{"ruleId":"319","severity":1,"message":"344","line":12,"column":59,"nodeType":"321","messageId":"322","endLine":12,"endColumn":67},{"ruleId":"319","severity":1,"message":"345","line":17,"column":8,"nodeType":"321","messageId":"322","endLine":17,"endColumn":20},{"ruleId":"319","severity":1,"message":"346","line":138,"column":34,"nodeType":"321","messageId":"322","endLine":138,"endColumn":52},{"ruleId":"347","severity":1,"message":"348","line":252,"column":50,"nodeType":"349","messageId":"350","endLine":252,"endColumn":51},{"ruleId":"319","severity":1,"message":"351","line":12,"column":8,"nodeType":"321","messageId":"322","endLine":12,"endColumn":19},{"ruleId":"319","severity":1,"message":"352","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"351","line":9,"column":8,"nodeType":"321","messageId":"322","endLine":9,"endColumn":19},{"ruleId":"319","severity":1,"message":"352","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"351","line":10,"column":8,"nodeType":"321","messageId":"322","endLine":10,"endColumn":19},{"ruleId":"353","severity":1,"message":"354","line":124,"column":76,"nodeType":"355","messageId":"356","endLine":124,"endColumn":78},{"ruleId":"319","severity":1,"message":"357","line":14,"column":10,"nodeType":"321","messageId":"322","endLine":14,"endColumn":23},{"ruleId":"358","severity":1,"message":"359","line":69,"column":13,"nodeType":"349","messageId":"360","endLine":69,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":116,"column":60,"nodeType":"349","messageId":"360","endLine":116,"endColumn":62},{"ruleId":"358","severity":1,"message":"359","line":363,"column":73,"nodeType":"349","messageId":"360","endLine":363,"endColumn":75},{"ruleId":"358","severity":1,"message":"359","line":364,"column":81,"nodeType":"349","messageId":"360","endLine":364,"endColumn":83},{"ruleId":"358","severity":1,"message":"359","line":371,"column":73,"nodeType":"349","messageId":"360","endLine":371,"endColumn":75},{"ruleId":"358","severity":1,"message":"359","line":372,"column":81,"nodeType":"349","messageId":"360","endLine":372,"endColumn":83},{"ruleId":"358","severity":1,"message":"359","line":54,"column":13,"nodeType":"349","messageId":"360","endLine":54,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":132,"column":64,"nodeType":"349","messageId":"360","endLine":132,"endColumn":66},{"ruleId":"358","severity":1,"message":"359","line":325,"column":80,"nodeType":"349","messageId":"360","endLine":325,"endColumn":82},{"ruleId":"358","severity":1,"message":"359","line":326,"column":88,"nodeType":"349","messageId":"360","endLine":326,"endColumn":90},{"ruleId":"319","severity":1,"message":"352","line":13,"column":8,"nodeType":"321","messageId":"322","endLine":13,"endColumn":13},{"ruleId":"319","severity":1,"message":"357","line":15,"column":10,"nodeType":"321","messageId":"322","endLine":15,"endColumn":23},{"ruleId":"358","severity":1,"message":"359","line":69,"column":13,"nodeType":"349","messageId":"360","endLine":69,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":114,"column":64,"nodeType":"349","messageId":"360","endLine":114,"endColumn":66},{"ruleId":"361","severity":1,"message":"362","line":222,"column":61,"nodeType":"363","endLine":222,"endColumn":115},{"ruleId":"364","severity":1,"message":"365","line":230,"column":43,"nodeType":"363","endLine":230,"endColumn":153},{"ruleId":"358","severity":1,"message":"359","line":381,"column":77,"nodeType":"349","messageId":"360","endLine":381,"endColumn":79},{"ruleId":"358","severity":1,"message":"359","line":382,"column":85,"nodeType":"349","messageId":"360","endLine":382,"endColumn":87},{"ruleId":"358","severity":1,"message":"359","line":389,"column":77,"nodeType":"349","messageId":"360","endLine":389,"endColumn":79},{"ruleId":"358","severity":1,"message":"359","line":390,"column":85,"nodeType":"349","messageId":"360","endLine":390,"endColumn":87},{"ruleId":"358","severity":1,"message":"359","line":398,"column":77,"nodeType":"349","messageId":"360","endLine":398,"endColumn":79},{"ruleId":"358","severity":1,"message":"359","line":399,"column":85,"nodeType":"349","messageId":"360","endLine":399,"endColumn":87},{"ruleId":"358","severity":1,"message":"359","line":406,"column":77,"nodeType":"349","messageId":"360","endLine":406,"endColumn":79},{"ruleId":"358","severity":1,"message":"359","line":407,"column":85,"nodeType":"349","messageId":"360","endLine":407,"endColumn":87},{"ruleId":"319","severity":1,"message":"351","line":12,"column":8,"nodeType":"321","messageId":"322","endLine":12,"endColumn":19},{"ruleId":"319","severity":1,"message":"352","line":13,"column":8,"nodeType":"321","messageId":"322","endLine":13,"endColumn":13},{"ruleId":"319","severity":1,"message":"357","line":15,"column":10,"nodeType":"321","messageId":"322","endLine":15,"endColumn":23},{"ruleId":"358","severity":1,"message":"359","line":72,"column":13,"nodeType":"349","messageId":"360","endLine":72,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":121,"column":62,"nodeType":"349","messageId":"360","endLine":121,"endColumn":64},{"ruleId":"358","severity":1,"message":"359","line":466,"column":75,"nodeType":"349","messageId":"360","endLine":466,"endColumn":77},{"ruleId":"358","severity":1,"message":"359","line":467,"column":83,"nodeType":"349","messageId":"360","endLine":467,"endColumn":85},{"ruleId":"358","severity":1,"message":"359","line":476,"column":75,"nodeType":"349","messageId":"360","endLine":476,"endColumn":77},{"ruleId":"358","severity":1,"message":"359","line":477,"column":83,"nodeType":"349","messageId":"360","endLine":477,"endColumn":85},{"ruleId":"319","severity":1,"message":"351","line":11,"column":8,"nodeType":"321","messageId":"322","endLine":11,"endColumn":19},{"ruleId":"366","severity":1,"message":"367","line":35,"column":7,"nodeType":"368","messageId":"360","endLine":35,"endColumn":12},{"ruleId":"319","severity":1,"message":"352","line":13,"column":8,"nodeType":"321","messageId":"322","endLine":13,"endColumn":13},{"ruleId":"319","severity":1,"message":"357","line":15,"column":10,"nodeType":"321","messageId":"322","endLine":15,"endColumn":23},{"ruleId":"358","severity":1,"message":"359","line":68,"column":13,"nodeType":"349","messageId":"360","endLine":68,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":109,"column":63,"nodeType":"349","messageId":"360","endLine":109,"endColumn":65},{"ruleId":"361","severity":1,"message":"362","line":206,"column":61,"nodeType":"363","endLine":206,"endColumn":115},{"ruleId":"358","severity":1,"message":"359","line":379,"column":76,"nodeType":"349","messageId":"360","endLine":379,"endColumn":78},{"ruleId":"358","severity":1,"message":"359","line":380,"column":84,"nodeType":"349","messageId":"360","endLine":380,"endColumn":86},{"ruleId":"358","severity":1,"message":"359","line":388,"column":76,"nodeType":"349","messageId":"360","endLine":388,"endColumn":78},{"ruleId":"358","severity":1,"message":"359","line":389,"column":84,"nodeType":"349","messageId":"360","endLine":389,"endColumn":86},{"ruleId":"319","severity":1,"message":"331","line":6,"column":8,"nodeType":"321","messageId":"322","endLine":6,"endColumn":16},{"ruleId":"319","severity":1,"message":"351","line":11,"column":8,"nodeType":"321","messageId":"322","endLine":11,"endColumn":19},{"ruleId":"319","severity":1,"message":"369","line":19,"column":10,"nodeType":"321","messageId":"322","endLine":19,"endColumn":26},{"ruleId":"319","severity":1,"message":"352","line":13,"column":8,"nodeType":"321","messageId":"322","endLine":13,"endColumn":13},{"ruleId":"319","severity":1,"message":"357","line":15,"column":10,"nodeType":"321","messageId":"322","endLine":15,"endColumn":23},{"ruleId":"319","severity":1,"message":"370","line":29,"column":8,"nodeType":"321","messageId":"322","endLine":29,"endColumn":18},{"ruleId":"358","severity":1,"message":"359","line":60,"column":13,"nodeType":"349","messageId":"360","endLine":60,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":100,"column":66,"nodeType":"349","messageId":"360","endLine":100,"endColumn":68},{"ruleId":"358","severity":1,"message":"359","line":215,"column":73,"nodeType":"349","messageId":"360","endLine":215,"endColumn":75},{"ruleId":"358","severity":1,"message":"359","line":216,"column":81,"nodeType":"349","messageId":"360","endLine":216,"endColumn":83},{"ruleId":"371","severity":1,"message":"372","line":63,"column":6,"nodeType":"373","endLine":63,"endColumn":8,"suggestions":"374"},{"ruleId":"319","severity":1,"message":"351","line":12,"column":8,"nodeType":"321","messageId":"322","endLine":12,"endColumn":19},{"ruleId":"319","severity":1,"message":"375","line":14,"column":8,"nodeType":"321","messageId":"322","endLine":14,"endColumn":11},{"ruleId":"319","severity":1,"message":"376","line":15,"column":8,"nodeType":"321","messageId":"322","endLine":15,"endColumn":15},{"ruleId":"319","severity":1,"message":"352","line":13,"column":8,"nodeType":"321","messageId":"322","endLine":13,"endColumn":13},{"ruleId":"319","severity":1,"message":"357","line":15,"column":10,"nodeType":"321","messageId":"322","endLine":15,"endColumn":23},{"ruleId":"319","severity":1,"message":"377","line":33,"column":10,"nodeType":"321","messageId":"322","endLine":33,"endColumn":28},{"ruleId":"358","severity":1,"message":"359","line":123,"column":62,"nodeType":"349","messageId":"360","endLine":123,"endColumn":64},{"ruleId":"358","severity":1,"message":"359","line":407,"column":75,"nodeType":"349","messageId":"360","endLine":407,"endColumn":77},{"ruleId":"358","severity":1,"message":"359","line":408,"column":83,"nodeType":"349","messageId":"360","endLine":408,"endColumn":85},{"ruleId":"358","severity":1,"message":"359","line":416,"column":75,"nodeType":"349","messageId":"360","endLine":416,"endColumn":77},{"ruleId":"358","severity":1,"message":"359","line":417,"column":83,"nodeType":"349","messageId":"360","endLine":417,"endColumn":85},{"ruleId":"319","severity":1,"message":"331","line":6,"column":8,"nodeType":"321","messageId":"322","endLine":6,"endColumn":16},{"ruleId":"319","severity":1,"message":"351","line":11,"column":8,"nodeType":"321","messageId":"322","endLine":11,"endColumn":19},{"ruleId":"319","severity":1,"message":"352","line":13,"column":8,"nodeType":"321","messageId":"322","endLine":13,"endColumn":13},{"ruleId":"319","severity":1,"message":"357","line":15,"column":10,"nodeType":"321","messageId":"322","endLine":15,"endColumn":23},{"ruleId":"319","severity":1,"message":"333","line":24,"column":8,"nodeType":"321","messageId":"322","endLine":24,"endColumn":24},{"ruleId":"319","severity":1,"message":"378","line":25,"column":8,"nodeType":"321","messageId":"322","endLine":25,"endColumn":16},{"ruleId":"319","severity":1,"message":"379","line":28,"column":8,"nodeType":"321","messageId":"322","endLine":28,"endColumn":17},{"ruleId":"319","severity":1,"message":"380","line":29,"column":8,"nodeType":"321","messageId":"322","endLine":29,"endColumn":24},{"ruleId":"319","severity":1,"message":"381","line":30,"column":8,"nodeType":"321","messageId":"322","endLine":30,"endColumn":24},{"ruleId":"319","severity":1,"message":"370","line":34,"column":8,"nodeType":"321","messageId":"322","endLine":34,"endColumn":18},{"ruleId":"319","severity":1,"message":"382","line":36,"column":8,"nodeType":"321","messageId":"322","endLine":36,"endColumn":22},{"ruleId":"319","severity":1,"message":"383","line":39,"column":10,"nodeType":"321","messageId":"322","endLine":39,"endColumn":29},{"ruleId":"319","severity":1,"message":"384","line":39,"column":31,"nodeType":"321","messageId":"322","endLine":39,"endColumn":44},{"ruleId":"358","severity":1,"message":"359","line":68,"column":13,"nodeType":"349","messageId":"360","endLine":68,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":109,"column":63,"nodeType":"349","messageId":"360","endLine":109,"endColumn":65},{"ruleId":"358","severity":1,"message":"359","line":322,"column":76,"nodeType":"349","messageId":"360","endLine":322,"endColumn":78},{"ruleId":"358","severity":1,"message":"359","line":323,"column":84,"nodeType":"349","messageId":"360","endLine":323,"endColumn":86},{"ruleId":"319","severity":1,"message":"351","line":11,"column":8,"nodeType":"321","messageId":"322","endLine":11,"endColumn":19},{"ruleId":"319","severity":1,"message":"385","line":20,"column":20,"nodeType":"321","messageId":"322","endLine":20,"endColumn":28},{"ruleId":"319","severity":1,"message":"352","line":13,"column":8,"nodeType":"321","messageId":"322","endLine":13,"endColumn":13},{"ruleId":"319","severity":1,"message":"357","line":15,"column":10,"nodeType":"321","messageId":"322","endLine":15,"endColumn":23},{"ruleId":"358","severity":1,"message":"359","line":69,"column":13,"nodeType":"349","messageId":"360","endLine":69,"endColumn":15},{"ruleId":"358","severity":1,"message":"359","line":110,"column":63,"nodeType":"349","messageId":"360","endLine":110,"endColumn":65},{"ruleId":"358","severity":1,"message":"359","line":348,"column":74,"nodeType":"349","messageId":"360","endLine":348,"endColumn":76},{"ruleId":"358","severity":1,"message":"359","line":349,"column":82,"nodeType":"349","messageId":"360","endLine":349,"endColumn":84},"no-native-reassign",["386"],"no-negated-in-lhs",["387"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'withRouter' is defined but never used.","'Menu' is defined but never used.","'Grid' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'ExpansionPanelDetails' is defined but never used.","'ExpansionPanelSummary' is defined but never used.","'MenuItem' is defined but never used.","'FormLabel' is defined but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'makeStyles' is defined but never used.","'createStyles' is defined but never used.","'Theme' is defined but never used.","'Link' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'ListItemIcon' is defined but never used.","'mobileOpenSettings' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'CardActions' is defined but never used.","'axios' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'fetchZoneList' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-dupe-keys","Duplicate key 'image'.","ObjectExpression","'fetchAllHospital' is defined but never used.","'Typography' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'prevSelectedImageIds'. Either include it or remove the dependency array. If 'setSelectImage' needs the current value of 'prevSelectedImageIds', you can also switch to useReducer instead of useState and read 'prevSelectedImageIds' in the reducer.","ArrayExpression",["388"],"'Fab' is defined but never used.","'AddIcon' is defined but never used.","'fetchAllDiseaseCat' is defined but never used.","'Checkbox' is defined but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'fetchServiceDetails' is defined but never used.","'deleteService' is defined but never used.","'editForm' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"389","fix":"390"},"Update the dependencies array to be: [prevSelectedImageIds]",{"range":"391","text":"392"},[1919,1921],"[prevSelectedImageIds]"]